# typed: strong

module OpenAI
  module Models
    class EvalItem < OpenAI::Internal::Type::BaseModel
      OrHash =
        T.type_alias { T.any(OpenAI::EvalItem, OpenAI::Internal::AnyHash) }

      # Text inputs to the model - can contain template strings.
      sig do
        returns(
          T.any(
            String,
            OpenAI::Responses::ResponseInputText,
            OpenAI::EvalItem::Content::OutputText
          )
        )
      end
      attr_accessor :content

      # The role of the message input. One of `user`, `assistant`, `system`, or
      # `developer`.
      sig { returns(OpenAI::EvalItem::Role::OrSymbol) }
      attr_accessor :role

      # The type of the message input. Always `message`.
      sig { returns(T.nilable(OpenAI::EvalItem::Type::OrSymbol)) }
      attr_reader :type

      sig { params(type: OpenAI::EvalItem::Type::OrSymbol).void }
      attr_writer :type

      # A message input to the model with a role indicating instruction following
      # hierarchy. Instructions given with the `developer` or `system` role take
      # precedence over instructions given with the `user` role. Messages with the
      # `assistant` role are presumed to have been generated by the model in previous
      # interactions.
      sig do
        params(
          content:
            T.any(
              String,
              OpenAI::Responses::ResponseInputText::OrHash,
              OpenAI::EvalItem::Content::OutputText::OrHash
            ),
          role: OpenAI::EvalItem::Role::OrSymbol,
          type: OpenAI::EvalItem::Type::OrSymbol
        ).returns(T.attached_class)
      end
      def self.new(
        # Text inputs to the model - can contain template strings.
        content:,
        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        role:,
        # The type of the message input. Always `message`.
        type: nil
      )
      end

      sig do
        override.returns(
          {
            content:
              T.any(
                String,
                OpenAI::Responses::ResponseInputText,
                OpenAI::EvalItem::Content::OutputText
              ),
            role: OpenAI::EvalItem::Role::OrSymbol,
            type: OpenAI::EvalItem::Type::OrSymbol
          }
        )
      end
      def to_hash
      end

      # Text inputs to the model - can contain template strings.
      module Content
        extend OpenAI::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              String,
              OpenAI::Responses::ResponseInputText,
              OpenAI::EvalItem::Content::OutputText
            )
          end

        class OutputText < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                OpenAI::EvalItem::Content::OutputText,
                OpenAI::Internal::AnyHash
              )
            end

          # The text output from the model.
          sig { returns(String) }
          attr_accessor :text

          # The type of the output text. Always `output_text`.
          sig { returns(Symbol) }
          attr_accessor :type

          # A text output from the model.
          sig { params(text: String, type: Symbol).returns(T.attached_class) }
          def self.new(
            # The text output from the model.
            text:,
            # The type of the output text. Always `output_text`.
            type: :output_text
          )
          end

          sig { override.returns({ text: String, type: Symbol }) }
          def to_hash
          end
        end

        sig { override.returns(T::Array[OpenAI::EvalItem::Content::Variants]) }
        def self.variants
        end
      end

      # The role of the message input. One of `user`, `assistant`, `system`, or
      # `developer`.
      module Role
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, OpenAI::EvalItem::Role) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        USER = T.let(:user, OpenAI::EvalItem::Role::TaggedSymbol)
        ASSISTANT = T.let(:assistant, OpenAI::EvalItem::Role::TaggedSymbol)
        SYSTEM = T.let(:system, OpenAI::EvalItem::Role::TaggedSymbol)
        DEVELOPER = T.let(:developer, OpenAI::EvalItem::Role::TaggedSymbol)

        sig { override.returns(T::Array[OpenAI::EvalItem::Role::TaggedSymbol]) }
        def self.values
        end
      end

      # The type of the message input. Always `message`.
      module Type
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, OpenAI::EvalItem::Type) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        MESSAGE = T.let(:message, OpenAI::EvalItem::Type::TaggedSymbol)

        sig { override.returns(T::Array[OpenAI::EvalItem::Type::TaggedSymbol]) }
        def self.values
        end
      end
    end
  end
end
