# typed: strong

module OpenAI
  module Models
    ChatCompletionAudio = Chat::ChatCompletionAudio

    module Chat
      class ChatCompletionAudio < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(OpenAI::Chat::ChatCompletionAudio, OpenAI::Internal::AnyHash)
          end

        # Unique identifier for this audio response.
        sig { returns(String) }
        attr_accessor :id

        # Base64 encoded audio bytes generated by the model, in the format specified in
        # the request.
        sig { returns(String) }
        attr_accessor :data

        # The Unix timestamp (in seconds) for when this audio response will no longer be
        # accessible on the server for use in multi-turn conversations.
        sig { returns(Integer) }
        attr_accessor :expires_at

        # Transcript of the audio generated by the model.
        sig { returns(String) }
        attr_accessor :transcript

        # If the audio output modality is requested, this object contains data about the
        # audio response from the model.
        # [Learn more](https://platform.openai.com/docs/guides/audio).
        sig do
          params(
            id: String,
            data: String,
            expires_at: Integer,
            transcript: String
          ).returns(T.attached_class)
        end
        def self.new(
          # Unique identifier for this audio response.
          id:,
          # Base64 encoded audio bytes generated by the model, in the format specified in
          # the request.
          data:,
          # The Unix timestamp (in seconds) for when this audio response will no longer be
          # accessible on the server for use in multi-turn conversations.
          expires_at:,
          # Transcript of the audio generated by the model.
          transcript:
        )
        end

        sig do
          override.returns(
            {
              id: String,
              data: String,
              expires_at: Integer,
              transcript: String
            }
          )
        end
        def to_hash
        end
      end
    end
  end
end
