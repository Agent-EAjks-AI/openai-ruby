# typed: strong

module OpenAI
  module Models
    ChatCompletionMessage = Chat::ChatCompletionMessage

    module Chat
      class ChatCompletionMessage < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Chat::ChatCompletionMessage,
              OpenAI::Internal::AnyHash
            )
          end

        # The contents of the message.
        sig { returns(T.nilable(String)) }
        attr_accessor :content

        # The refusal message generated by the model.
        sig { returns(T.nilable(String)) }
        attr_accessor :refusal

        # The role of the author of this message.
        sig { returns(Symbol) }
        attr_accessor :role

        # Annotations for the message, when applicable, as when using the
        # [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
        sig do
          returns(
            T.nilable(T::Array[OpenAI::Chat::ChatCompletionMessage::Annotation])
          )
        end
        attr_reader :annotations

        sig do
          params(
            annotations:
              T::Array[OpenAI::Chat::ChatCompletionMessage::Annotation::OrHash]
          ).void
        end
        attr_writer :annotations

        # If the audio output modality is requested, this object contains data about the
        # audio response from the model.
        # [Learn more](https://platform.openai.com/docs/guides/audio).
        sig { returns(T.nilable(OpenAI::Chat::ChatCompletionAudio)) }
        attr_reader :audio

        sig do
          params(
            audio: T.nilable(OpenAI::Chat::ChatCompletionAudio::OrHash)
          ).void
        end
        attr_writer :audio

        # Deprecated and replaced by `tool_calls`. The name and arguments of a function
        # that should be called, as generated by the model.
        sig do
          returns(T.nilable(OpenAI::Chat::ChatCompletionMessage::FunctionCall))
        end
        attr_reader :function_call

        sig do
          params(
            function_call:
              OpenAI::Chat::ChatCompletionMessage::FunctionCall::OrHash
          ).void
        end
        attr_writer :function_call

        # The tool calls generated by the model, such as function calls.
        sig do
          returns(
            T.nilable(T::Array[OpenAI::Chat::ChatCompletionMessageToolCall])
          )
        end
        attr_reader :tool_calls

        sig do
          params(
            tool_calls:
              T::Array[OpenAI::Chat::ChatCompletionMessageToolCall::OrHash]
          ).void
        end
        attr_writer :tool_calls

        # A chat completion message generated by the model.
        sig do
          params(
            content: T.nilable(String),
            refusal: T.nilable(String),
            annotations:
              T::Array[OpenAI::Chat::ChatCompletionMessage::Annotation::OrHash],
            audio: T.nilable(OpenAI::Chat::ChatCompletionAudio::OrHash),
            function_call:
              OpenAI::Chat::ChatCompletionMessage::FunctionCall::OrHash,
            tool_calls:
              T::Array[OpenAI::Chat::ChatCompletionMessageToolCall::OrHash],
            role: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # The contents of the message.
          content:,
          # The refusal message generated by the model.
          refusal:,
          # Annotations for the message, when applicable, as when using the
          # [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
          annotations: nil,
          # If the audio output modality is requested, this object contains data about the
          # audio response from the model.
          # [Learn more](https://platform.openai.com/docs/guides/audio).
          audio: nil,
          # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          # that should be called, as generated by the model.
          function_call: nil,
          # The tool calls generated by the model, such as function calls.
          tool_calls: nil,
          # The role of the author of this message.
          role: :assistant
        )
        end

        sig do
          override.returns(
            {
              content: T.nilable(String),
              refusal: T.nilable(String),
              role: Symbol,
              annotations:
                T::Array[OpenAI::Chat::ChatCompletionMessage::Annotation],
              audio: T.nilable(OpenAI::Chat::ChatCompletionAudio),
              function_call: OpenAI::Chat::ChatCompletionMessage::FunctionCall,
              tool_calls: T::Array[OpenAI::Chat::ChatCompletionMessageToolCall]
            }
          )
        end
        def to_hash
        end

        class Annotation < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                OpenAI::Chat::ChatCompletionMessage::Annotation,
                OpenAI::Internal::AnyHash
              )
            end

          # The type of the URL citation. Always `url_citation`.
          sig { returns(Symbol) }
          attr_accessor :type

          # A URL citation when using web search.
          sig do
            returns(
              OpenAI::Chat::ChatCompletionMessage::Annotation::URLCitation
            )
          end
          attr_reader :url_citation

          sig do
            params(
              url_citation:
                OpenAI::Chat::ChatCompletionMessage::Annotation::URLCitation::OrHash
            ).void
          end
          attr_writer :url_citation

          # A URL citation when using web search.
          sig do
            params(
              url_citation:
                OpenAI::Chat::ChatCompletionMessage::Annotation::URLCitation::OrHash,
              type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # A URL citation when using web search.
            url_citation:,
            # The type of the URL citation. Always `url_citation`.
            type: :url_citation
          )
          end

          sig do
            override.returns(
              {
                type: Symbol,
                url_citation:
                  OpenAI::Chat::ChatCompletionMessage::Annotation::URLCitation
              }
            )
          end
          def to_hash
          end

          class URLCitation < OpenAI::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  OpenAI::Chat::ChatCompletionMessage::Annotation::URLCitation,
                  OpenAI::Internal::AnyHash
                )
              end

            # The index of the last character of the URL citation in the message.
            sig { returns(Integer) }
            attr_accessor :end_index

            # The index of the first character of the URL citation in the message.
            sig { returns(Integer) }
            attr_accessor :start_index

            # The title of the web resource.
            sig { returns(String) }
            attr_accessor :title

            # The URL of the web resource.
            sig { returns(String) }
            attr_accessor :url

            # A URL citation when using web search.
            sig do
              params(
                end_index: Integer,
                start_index: Integer,
                title: String,
                url: String
              ).returns(T.attached_class)
            end
            def self.new(
              # The index of the last character of the URL citation in the message.
              end_index:,
              # The index of the first character of the URL citation in the message.
              start_index:,
              # The title of the web resource.
              title:,
              # The URL of the web resource.
              url:
            )
            end

            sig do
              override.returns(
                {
                  end_index: Integer,
                  start_index: Integer,
                  title: String,
                  url: String
                }
              )
            end
            def to_hash
            end
          end
        end

        class FunctionCall < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                OpenAI::Chat::ChatCompletionMessage::FunctionCall,
                OpenAI::Internal::AnyHash
              )
            end

          # The arguments to call the function with, as generated by the model in JSON
          # format. Note that the model does not always generate valid JSON, and may
          # hallucinate parameters not defined by your function schema. Validate the
          # arguments in your code before calling your function.
          sig { returns(String) }
          attr_accessor :arguments

          # The name of the function to call.
          sig { returns(String) }
          attr_accessor :name

          # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          # that should be called, as generated by the model.
          sig do
            params(arguments: String, name: String).returns(T.attached_class)
          end
          def self.new(
            # The arguments to call the function with, as generated by the model in JSON
            # format. Note that the model does not always generate valid JSON, and may
            # hallucinate parameters not defined by your function schema. Validate the
            # arguments in your code before calling your function.
            arguments:,
            # The name of the function to call.
            name:
          )
          end

          sig { override.returns({ arguments: String, name: String }) }
          def to_hash
          end
        end
      end
    end
  end
end
