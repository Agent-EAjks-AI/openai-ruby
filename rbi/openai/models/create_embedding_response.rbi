# typed: strong

module OpenAI
  module Models
    class CreateEmbeddingResponse < OpenAI::Internal::Type::BaseModel
      OrHash =
        T.type_alias do
          T.any(OpenAI::CreateEmbeddingResponse, OpenAI::Internal::AnyHash)
        end

      # The list of embeddings generated by the model.
      sig { returns(T::Array[OpenAI::Embedding]) }
      attr_accessor :data

      # The name of the model used to generate the embedding.
      sig { returns(String) }
      attr_accessor :model

      # The object type, which is always "list".
      sig { returns(Symbol) }
      attr_accessor :object

      # The usage information for the request.
      sig { returns(OpenAI::CreateEmbeddingResponse::Usage) }
      attr_reader :usage

      sig { params(usage: OpenAI::CreateEmbeddingResponse::Usage::OrHash).void }
      attr_writer :usage

      sig do
        params(
          data: T::Array[OpenAI::Embedding::OrHash],
          model: String,
          usage: OpenAI::CreateEmbeddingResponse::Usage::OrHash,
          object: Symbol
        ).returns(T.attached_class)
      end
      def self.new(
        # The list of embeddings generated by the model.
        data:,
        # The name of the model used to generate the embedding.
        model:,
        # The usage information for the request.
        usage:,
        # The object type, which is always "list".
        object: :list
      )
      end

      sig do
        override.returns(
          {
            data: T::Array[OpenAI::Embedding],
            model: String,
            object: Symbol,
            usage: OpenAI::CreateEmbeddingResponse::Usage
          }
        )
      end
      def to_hash
      end

      class Usage < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::CreateEmbeddingResponse::Usage,
              OpenAI::Internal::AnyHash
            )
          end

        # The number of tokens used by the prompt.
        sig { returns(Integer) }
        attr_accessor :prompt_tokens

        # The total number of tokens used by the request.
        sig { returns(Integer) }
        attr_accessor :total_tokens

        # The usage information for the request.
        sig do
          params(prompt_tokens: Integer, total_tokens: Integer).returns(
            T.attached_class
          )
        end
        def self.new(
          # The number of tokens used by the prompt.
          prompt_tokens:,
          # The total number of tokens used by the request.
          total_tokens:
        )
        end

        sig do
          override.returns({ prompt_tokens: Integer, total_tokens: Integer })
        end
        def to_hash
        end
      end
    end
  end
end
