# typed: strong

module OpenAI
  module Models
    module Beta
      module Threads
        class MessageCreateParams < OpenAI::Internal::Type::BaseModel
          extend OpenAI::Internal::Type::RequestParameters::Converter
          include OpenAI::Internal::Type::RequestParameters

          OrHash =
            T.type_alias do
              T.any(
                OpenAI::Beta::Threads::MessageCreateParams,
                OpenAI::Internal::AnyHash
              )
            end

          # The text contents of the message.
          sig do
            returns(
              OpenAI::Beta::Threads::MessageCreateParams::Content::Variants
            )
          end
          attr_accessor :content

          # The role of the entity that is creating the message. Allowed values include:
          #
          # - `user`: Indicates the message is sent by an actual user and should be used in
          #   most cases to represent user-generated messages.
          # - `assistant`: Indicates the message is generated by the assistant. Use this
          #   value to insert messages from the assistant into the conversation.
          sig do
            returns(OpenAI::Beta::Threads::MessageCreateParams::Role::OrSymbol)
          end
          attr_accessor :role

          # A list of files attached to the message, and the tools they should be added to.
          sig do
            returns(
              T.nilable(
                T::Array[OpenAI::Beta::Threads::MessageCreateParams::Attachment]
              )
            )
          end
          attr_accessor :attachments

          # Set of 16 key-value pairs that can be attached to an object. This can be useful
          # for storing additional information about the object in a structured format, and
          # querying for objects via API or the dashboard.
          #
          # Keys are strings with a maximum length of 64 characters. Values are strings with
          # a maximum length of 512 characters.
          sig { returns(T.nilable(T::Hash[Symbol, String])) }
          attr_accessor :metadata

          sig do
            params(
              content:
                OpenAI::Beta::Threads::MessageCreateParams::Content::Variants,
              role: OpenAI::Beta::Threads::MessageCreateParams::Role::OrSymbol,
              attachments:
                T.nilable(
                  T::Array[
                    OpenAI::Beta::Threads::MessageCreateParams::Attachment::OrHash
                  ]
                ),
              metadata: T.nilable(T::Hash[Symbol, String]),
              request_options: OpenAI::RequestOptions::OrHash
            ).returns(T.attached_class)
          end
          def self.new(
            # The text contents of the message.
            content:,
            # The role of the entity that is creating the message. Allowed values include:
            #
            # - `user`: Indicates the message is sent by an actual user and should be used in
            #   most cases to represent user-generated messages.
            # - `assistant`: Indicates the message is generated by the assistant. Use this
            #   value to insert messages from the assistant into the conversation.
            role:,
            # A list of files attached to the message, and the tools they should be added to.
            attachments: nil,
            # Set of 16 key-value pairs that can be attached to an object. This can be useful
            # for storing additional information about the object in a structured format, and
            # querying for objects via API or the dashboard.
            #
            # Keys are strings with a maximum length of 64 characters. Values are strings with
            # a maximum length of 512 characters.
            metadata: nil,
            request_options: {}
          )
          end

          sig do
            override.returns(
              {
                content:
                  OpenAI::Beta::Threads::MessageCreateParams::Content::Variants,
                role:
                  OpenAI::Beta::Threads::MessageCreateParams::Role::OrSymbol,
                attachments:
                  T.nilable(
                    T::Array[
                      OpenAI::Beta::Threads::MessageCreateParams::Attachment
                    ]
                  ),
                metadata: T.nilable(T::Hash[Symbol, String]),
                request_options: OpenAI::RequestOptions
              }
            )
          end
          def to_hash
          end

          # The text contents of the message.
          module Content
            extend OpenAI::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  String,
                  T::Array[
                    OpenAI::Beta::Threads::MessageContentPartParam::Variants
                  ]
                )
              end

            sig do
              override.returns(
                T::Array[
                  OpenAI::Beta::Threads::MessageCreateParams::Content::Variants
                ]
              )
            end
            def self.variants
            end

            MessageContentPartParamArray =
              T.let(
                OpenAI::Internal::Type::ArrayOf[
                  union: OpenAI::Beta::Threads::MessageContentPartParam
                ],
                OpenAI::Internal::Type::Converter
              )
          end

          # The role of the entity that is creating the message. Allowed values include:
          #
          # - `user`: Indicates the message is sent by an actual user and should be used in
          #   most cases to represent user-generated messages.
          # - `assistant`: Indicates the message is generated by the assistant. Use this
          #   value to insert messages from the assistant into the conversation.
          module Role
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, OpenAI::Beta::Threads::MessageCreateParams::Role)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            USER =
              T.let(
                :user,
                OpenAI::Beta::Threads::MessageCreateParams::Role::TaggedSymbol
              )
            ASSISTANT =
              T.let(
                :assistant,
                OpenAI::Beta::Threads::MessageCreateParams::Role::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Beta::Threads::MessageCreateParams::Role::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class Attachment < OpenAI::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  OpenAI::Beta::Threads::MessageCreateParams::Attachment,
                  OpenAI::Internal::AnyHash
                )
              end

            # The ID of the file to attach to the message.
            sig { returns(T.nilable(String)) }
            attr_reader :file_id

            sig { params(file_id: String).void }
            attr_writer :file_id

            # The tools to add this file to.
            sig do
              returns(
                T.nilable(
                  T::Array[
                    T.any(
                      OpenAI::Beta::CodeInterpreterTool,
                      OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch
                    )
                  ]
                )
              )
            end
            attr_reader :tools

            sig do
              params(
                tools:
                  T::Array[
                    T.any(
                      OpenAI::Beta::CodeInterpreterTool::OrHash,
                      OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch::OrHash
                    )
                  ]
              ).void
            end
            attr_writer :tools

            sig do
              params(
                file_id: String,
                tools:
                  T::Array[
                    T.any(
                      OpenAI::Beta::CodeInterpreterTool::OrHash,
                      OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch::OrHash
                    )
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # The ID of the file to attach to the message.
              file_id: nil,
              # The tools to add this file to.
              tools: nil
            )
            end

            sig do
              override.returns(
                {
                  file_id: String,
                  tools:
                    T::Array[
                      T.any(
                        OpenAI::Beta::CodeInterpreterTool,
                        OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch
                      )
                    ]
                }
              )
            end
            def to_hash
            end

            module Tool
              extend OpenAI::Internal::Type::Union

              Variants =
                T.type_alias do
                  T.any(
                    OpenAI::Beta::CodeInterpreterTool,
                    OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch
                  )
                end

              class FileSearch < OpenAI::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::FileSearch,
                      OpenAI::Internal::AnyHash
                    )
                  end

                # The type of tool being defined: `file_search`
                sig { returns(Symbol) }
                attr_accessor :type

                sig { params(type: Symbol).returns(T.attached_class) }
                def self.new(
                  # The type of tool being defined: `file_search`
                  type: :file_search
                )
                end

                sig { override.returns({ type: Symbol }) }
                def to_hash
                end
              end

              sig do
                override.returns(
                  T::Array[
                    OpenAI::Beta::Threads::MessageCreateParams::Attachment::Tool::Variants
                  ]
                )
              end
              def self.variants
              end
            end
          end
        end
      end
    end
  end
end
