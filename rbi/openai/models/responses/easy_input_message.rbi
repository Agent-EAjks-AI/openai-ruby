# typed: strong

module OpenAI
  module Models
    module Responses
      class EasyInputMessage < OpenAI::Internal::Type::BaseModel
        OrHash = T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

        # Text, image, or audio input to the model, used to generate a response. Can also
        # contain previous assistant responses.
        sig do
          returns(
            T.any(
              String,
              T::Array[
                T.any(
                  OpenAI::Responses::ResponseInputText,
                  OpenAI::Responses::ResponseInputImage,
                  OpenAI::Responses::ResponseInputFile
                )
              ]
            )
          )
        end
        attr_accessor :content

        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        sig { returns(OpenAI::Responses::EasyInputMessage::Role::OrSymbol) }
        attr_accessor :role

        # The type of the message input. Always `message`.
        sig do
          returns(
            T.nilable(OpenAI::Responses::EasyInputMessage::Type::OrSymbol)
          )
        end
        attr_reader :type

        sig do
          params(type: OpenAI::Responses::EasyInputMessage::Type::OrSymbol).void
        end
        attr_writer :type

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role. Messages with the
        # `assistant` role are presumed to have been generated by the model in previous
        # interactions.
        sig do
          params(
            content:
              T.any(
                String,
                T::Array[
                  T.any(
                    OpenAI::Responses::ResponseInputText::OrHash,
                    OpenAI::Responses::ResponseInputImage::OrHash,
                    OpenAI::Responses::ResponseInputFile::OrHash
                  )
                ]
              ),
            role: OpenAI::Responses::EasyInputMessage::Role::OrSymbol,
            type: OpenAI::Responses::EasyInputMessage::Type::OrSymbol
          ).returns(T.attached_class)
        end
        def self.new(
          # Text, image, or audio input to the model, used to generate a response. Can also
          # contain previous assistant responses.
          content:,
          # The role of the message input. One of `user`, `assistant`, `system`, or
          # `developer`.
          role:,
          # The type of the message input. Always `message`.
          type: nil
        )
        end

        sig do
          override.returns(
            {
              content:
                T.any(
                  String,
                  T::Array[
                    T.any(
                      OpenAI::Responses::ResponseInputText,
                      OpenAI::Responses::ResponseInputImage,
                      OpenAI::Responses::ResponseInputFile
                    )
                  ]
                ),
              role: OpenAI::Responses::EasyInputMessage::Role::OrSymbol,
              type: OpenAI::Responses::EasyInputMessage::Type::OrSymbol
            }
          )
        end
        def to_hash
        end

        # Text, image, or audio input to the model, used to generate a response. Can also
        # contain previous assistant responses.
        module Content
          extend OpenAI::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                String,
                T::Array[
                  T.any(
                    OpenAI::Responses::ResponseInputText,
                    OpenAI::Responses::ResponseInputImage,
                    OpenAI::Responses::ResponseInputFile
                  )
                ]
              )
            end

          sig do
            override.returns(
              T::Array[OpenAI::Responses::EasyInputMessage::Content::Variants]
            )
          end
          def self.variants
          end
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        module Role
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(Symbol, OpenAI::Responses::EasyInputMessage::Role)
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          USER =
            T.let(
              :user,
              OpenAI::Responses::EasyInputMessage::Role::TaggedSymbol
            )
          ASSISTANT =
            T.let(
              :assistant,
              OpenAI::Responses::EasyInputMessage::Role::TaggedSymbol
            )
          SYSTEM =
            T.let(
              :system,
              OpenAI::Responses::EasyInputMessage::Role::TaggedSymbol
            )
          DEVELOPER =
            T.let(
              :developer,
              OpenAI::Responses::EasyInputMessage::Role::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[OpenAI::Responses::EasyInputMessage::Role::TaggedSymbol]
            )
          end
          def self.values
          end
        end

        # The type of the message input. Always `message`.
        module Type
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(Symbol, OpenAI::Responses::EasyInputMessage::Type)
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          MESSAGE =
            T.let(
              :message,
              OpenAI::Responses::EasyInputMessage::Type::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[OpenAI::Responses::EasyInputMessage::Type::TaggedSymbol]
            )
          end
          def self.values
          end
        end
      end
    end
  end
end
