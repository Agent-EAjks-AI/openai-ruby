# typed: strong

module OpenAI
  module Models
    module Responses
      class ResponseFunctionToolCall < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Responses::ResponseFunctionToolCall,
              OpenAI::Internal::AnyHash
            )
          end

        # A JSON string of the arguments to pass to the function.
        sig { returns(String) }
        attr_accessor :arguments

        # The unique ID of the function tool call generated by the model.
        sig { returns(String) }
        attr_accessor :call_id

        # The name of the function to run.
        sig { returns(String) }
        attr_accessor :name

        # The type of the function tool call. Always `function_call`.
        sig { returns(Symbol) }
        attr_accessor :type

        # The unique ID of the function tool call.
        sig { returns(T.nilable(String)) }
        attr_reader :id

        sig { params(id: String).void }
        attr_writer :id

        # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
        # Populated when items are returned via API.
        sig do
          returns(
            T.nilable(
              OpenAI::Responses::ResponseFunctionToolCall::Status::OrSymbol
            )
          )
        end
        attr_reader :status

        sig do
          params(
            status:
              OpenAI::Responses::ResponseFunctionToolCall::Status::OrSymbol
          ).void
        end
        attr_writer :status

        # A tool call to run a function. See the
        # [function calling guide](https://platform.openai.com/docs/guides/function-calling)
        # for more information.
        sig do
          params(
            arguments: String,
            call_id: String,
            name: String,
            id: String,
            status:
              OpenAI::Responses::ResponseFunctionToolCall::Status::OrSymbol,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # A JSON string of the arguments to pass to the function.
          arguments:,
          # The unique ID of the function tool call generated by the model.
          call_id:,
          # The name of the function to run.
          name:,
          # The unique ID of the function tool call.
          id: nil,
          # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          status: nil,
          # The type of the function tool call. Always `function_call`.
          type: :function_call
        )
        end

        sig do
          override.returns(
            {
              arguments: String,
              call_id: String,
              name: String,
              type: Symbol,
              id: String,
              status:
                OpenAI::Responses::ResponseFunctionToolCall::Status::OrSymbol
            }
          )
        end
        def to_hash
        end

        # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
        # Populated when items are returned via API.
        module Status
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(Symbol, OpenAI::Responses::ResponseFunctionToolCall::Status)
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          IN_PROGRESS =
            T.let(
              :in_progress,
              OpenAI::Responses::ResponseFunctionToolCall::Status::TaggedSymbol
            )
          COMPLETED =
            T.let(
              :completed,
              OpenAI::Responses::ResponseFunctionToolCall::Status::TaggedSymbol
            )
          INCOMPLETE =
            T.let(
              :incomplete,
              OpenAI::Responses::ResponseFunctionToolCall::Status::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                OpenAI::Responses::ResponseFunctionToolCall::Status::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end
      end
    end
  end
end
