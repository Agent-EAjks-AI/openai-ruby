# typed: strong

module OpenAI
  module Models
    module Responses
      # A message input to the model with a role indicating instruction following
      # hierarchy. Instructions given with the `developer` or `system` role take
      # precedence over instructions given with the `user` role. Messages with the
      # `assistant` role are presumed to have been generated by the model in previous
      # interactions.
      module ResponseInputItem
        extend OpenAI::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              OpenAI::Responses::EasyInputMessage,
              OpenAI::Responses::ResponseInputItem::Message,
              OpenAI::Responses::ResponseOutputMessage,
              OpenAI::Responses::ResponseFileSearchToolCall,
              OpenAI::Responses::ResponseComputerToolCall,
              OpenAI::Responses::ResponseInputItem::ComputerCallOutput,
              OpenAI::Responses::ResponseFunctionWebSearch,
              OpenAI::Responses::ResponseFunctionToolCall,
              OpenAI::Responses::ResponseInputItem::FunctionCallOutput,
              OpenAI::Responses::ResponseReasoningItem,
              OpenAI::Responses::ResponseInputItem::ItemReference
            )
          end

        class Message < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

          # A list of one or many input items to the model, containing different content
          # types.
          sig do
            returns(
              T::Array[
                T.any(
                  OpenAI::Responses::ResponseInputText,
                  OpenAI::Responses::ResponseInputImage,
                  OpenAI::Responses::ResponseInputFile
                )
              ]
            )
          end
          attr_accessor :content

          # The role of the message input. One of `user`, `system`, or `developer`.
          sig do
            returns(
              OpenAI::Responses::ResponseInputItem::Message::Role::OrSymbol
            )
          end
          attr_accessor :role

          # The status of item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          sig do
            returns(
              T.nilable(
                OpenAI::Responses::ResponseInputItem::Message::Status::OrSymbol
              )
            )
          end
          attr_reader :status

          sig do
            params(
              status:
                OpenAI::Responses::ResponseInputItem::Message::Status::OrSymbol
            ).void
          end
          attr_writer :status

          # The type of the message input. Always set to `message`.
          sig do
            returns(
              T.nilable(
                OpenAI::Responses::ResponseInputItem::Message::Type::OrSymbol
              )
            )
          end
          attr_reader :type

          sig do
            params(
              type:
                OpenAI::Responses::ResponseInputItem::Message::Type::OrSymbol
            ).void
          end
          attr_writer :type

          # A message input to the model with a role indicating instruction following
          # hierarchy. Instructions given with the `developer` or `system` role take
          # precedence over instructions given with the `user` role.
          sig do
            params(
              content:
                T::Array[
                  T.any(
                    OpenAI::Responses::ResponseInputText::OrHash,
                    OpenAI::Responses::ResponseInputImage::OrHash,
                    OpenAI::Responses::ResponseInputFile::OrHash
                  )
                ],
              role:
                OpenAI::Responses::ResponseInputItem::Message::Role::OrSymbol,
              status:
                OpenAI::Responses::ResponseInputItem::Message::Status::OrSymbol,
              type:
                OpenAI::Responses::ResponseInputItem::Message::Type::OrSymbol
            ).returns(T.attached_class)
          end
          def self.new(
            # A list of one or many input items to the model, containing different content
            # types.
            content:,
            # The role of the message input. One of `user`, `system`, or `developer`.
            role:,
            # The status of item. One of `in_progress`, `completed`, or `incomplete`.
            # Populated when items are returned via API.
            status: nil,
            # The type of the message input. Always set to `message`.
            type: nil
          )
          end

          sig do
            override.returns(
              {
                content:
                  T::Array[
                    T.any(
                      OpenAI::Responses::ResponseInputText,
                      OpenAI::Responses::ResponseInputImage,
                      OpenAI::Responses::ResponseInputFile
                    )
                  ],
                role:
                  OpenAI::Responses::ResponseInputItem::Message::Role::OrSymbol,
                status:
                  OpenAI::Responses::ResponseInputItem::Message::Status::OrSymbol,
                type:
                  OpenAI::Responses::ResponseInputItem::Message::Type::OrSymbol
              }
            )
          end
          def to_hash
          end

          # The role of the message input. One of `user`, `system`, or `developer`.
          module Role
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::Message::Role
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            USER =
              T.let(
                :user,
                OpenAI::Responses::ResponseInputItem::Message::Role::TaggedSymbol
              )
            SYSTEM =
              T.let(
                :system,
                OpenAI::Responses::ResponseInputItem::Message::Role::TaggedSymbol
              )
            DEVELOPER =
              T.let(
                :developer,
                OpenAI::Responses::ResponseInputItem::Message::Role::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::Message::Role::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          # The status of item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          module Status
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::Message::Status
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            IN_PROGRESS =
              T.let(
                :in_progress,
                OpenAI::Responses::ResponseInputItem::Message::Status::TaggedSymbol
              )
            COMPLETED =
              T.let(
                :completed,
                OpenAI::Responses::ResponseInputItem::Message::Status::TaggedSymbol
              )
            INCOMPLETE =
              T.let(
                :incomplete,
                OpenAI::Responses::ResponseInputItem::Message::Status::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::Message::Status::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          # The type of the message input. Always set to `message`.
          module Type
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::Message::Type
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            MESSAGE =
              T.let(
                :message,
                OpenAI::Responses::ResponseInputItem::Message::Type::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::Message::Type::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        class ComputerCallOutput < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

          # The ID of the computer tool call that produced the output.
          sig { returns(String) }
          attr_accessor :call_id

          # A computer screenshot image used with the computer use tool.
          sig do
            returns(OpenAI::Responses::ResponseComputerToolCallOutputScreenshot)
          end
          attr_reader :output

          sig do
            params(
              output:
                OpenAI::Responses::ResponseComputerToolCallOutputScreenshot::OrHash
            ).void
          end
          attr_writer :output

          # The type of the computer tool call output. Always `computer_call_output`.
          sig { returns(Symbol) }
          attr_accessor :type

          # The ID of the computer tool call output.
          sig { returns(T.nilable(String)) }
          attr_accessor :id

          # The safety checks reported by the API that have been acknowledged by the
          # developer.
          sig do
            returns(
              T.nilable(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck
                ]
              )
            )
          end
          attr_accessor :acknowledged_safety_checks

          # The status of the message input. One of `in_progress`, `completed`, or
          # `incomplete`. Populated when input items are returned via API.
          sig do
            returns(
              T.nilable(
                OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::OrSymbol
              )
            )
          end
          attr_accessor :status

          # The output of a computer tool call.
          sig do
            params(
              call_id: String,
              output:
                OpenAI::Responses::ResponseComputerToolCallOutputScreenshot::OrHash,
              id: T.nilable(String),
              acknowledged_safety_checks:
                T.nilable(
                  T::Array[
                    OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck::OrHash
                  ]
                ),
              status:
                T.nilable(
                  OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::OrSymbol
                ),
              type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The ID of the computer tool call that produced the output.
            call_id:,
            # A computer screenshot image used with the computer use tool.
            output:,
            # The ID of the computer tool call output.
            id: nil,
            # The safety checks reported by the API that have been acknowledged by the
            # developer.
            acknowledged_safety_checks: nil,
            # The status of the message input. One of `in_progress`, `completed`, or
            # `incomplete`. Populated when input items are returned via API.
            status: nil,
            # The type of the computer tool call output. Always `computer_call_output`.
            type: :computer_call_output
          )
          end

          sig do
            override.returns(
              {
                call_id: String,
                output:
                  OpenAI::Responses::ResponseComputerToolCallOutputScreenshot,
                type: Symbol,
                id: T.nilable(String),
                acknowledged_safety_checks:
                  T.nilable(
                    T::Array[
                      OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck
                    ]
                  ),
                status:
                  T.nilable(
                    OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::OrSymbol
                  )
              }
            )
          end
          def to_hash
          end

          class AcknowledgedSafetyCheck < OpenAI::Internal::Type::BaseModel
            OrHash =
              T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

            # The ID of the pending safety check.
            sig { returns(String) }
            attr_accessor :id

            # The type of the pending safety check.
            sig { returns(T.nilable(String)) }
            attr_accessor :code

            # Details about the pending safety check.
            sig { returns(T.nilable(String)) }
            attr_accessor :message

            # A pending safety check for the computer call.
            sig do
              params(
                id: String,
                code: T.nilable(String),
                message: T.nilable(String)
              ).returns(T.attached_class)
            end
            def self.new(
              # The ID of the pending safety check.
              id:,
              # The type of the pending safety check.
              code: nil,
              # Details about the pending safety check.
              message: nil
            )
            end

            sig do
              override.returns(
                {
                  id: String,
                  code: T.nilable(String),
                  message: T.nilable(String)
                }
              )
            end
            def to_hash
            end
          end

          # The status of the message input. One of `in_progress`, `completed`, or
          # `incomplete`. Populated when input items are returned via API.
          module Status
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            IN_PROGRESS =
              T.let(
                :in_progress,
                OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::TaggedSymbol
              )
            COMPLETED =
              T.let(
                :completed,
                OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::TaggedSymbol
              )
            INCOMPLETE =
              T.let(
                :incomplete,
                OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        class FunctionCallOutput < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

          # The unique ID of the function tool call generated by the model.
          sig { returns(String) }
          attr_accessor :call_id

          # A JSON string of the output of the function tool call.
          sig { returns(String) }
          attr_accessor :output

          # The type of the function tool call output. Always `function_call_output`.
          sig { returns(Symbol) }
          attr_accessor :type

          # The unique ID of the function tool call output. Populated when this item is
          # returned via API.
          sig { returns(T.nilable(String)) }
          attr_accessor :id

          # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          sig do
            returns(
              T.nilable(
                OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::OrSymbol
              )
            )
          end
          attr_accessor :status

          # The output of a function tool call.
          sig do
            params(
              call_id: String,
              output: String,
              id: T.nilable(String),
              status:
                T.nilable(
                  OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::OrSymbol
                ),
              type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The unique ID of the function tool call generated by the model.
            call_id:,
            # A JSON string of the output of the function tool call.
            output:,
            # The unique ID of the function tool call output. Populated when this item is
            # returned via API.
            id: nil,
            # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
            # Populated when items are returned via API.
            status: nil,
            # The type of the function tool call output. Always `function_call_output`.
            type: :function_call_output
          )
          end

          sig do
            override.returns(
              {
                call_id: String,
                output: String,
                type: Symbol,
                id: T.nilable(String),
                status:
                  T.nilable(
                    OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::OrSymbol
                  )
              }
            )
          end
          def to_hash
          end

          # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          module Status
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            IN_PROGRESS =
              T.let(
                :in_progress,
                OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::TaggedSymbol
              )
            COMPLETED =
              T.let(
                :completed,
                OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::TaggedSymbol
              )
            INCOMPLETE =
              T.let(
                :incomplete,
                OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        class ItemReference < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias { T.any(T.self_type, OpenAI::Internal::AnyHash) }

          # The ID of the item to reference.
          sig { returns(String) }
          attr_accessor :id

          # The type of item to reference. Always `item_reference`.
          sig do
            returns(
              T.nilable(
                OpenAI::Responses::ResponseInputItem::ItemReference::Type::OrSymbol
              )
            )
          end
          attr_accessor :type

          # An internal identifier for an item to reference.
          sig do
            params(
              id: String,
              type:
                T.nilable(
                  OpenAI::Responses::ResponseInputItem::ItemReference::Type::OrSymbol
                )
            ).returns(T.attached_class)
          end
          def self.new(
            # The ID of the item to reference.
            id:,
            # The type of item to reference. Always `item_reference`.
            type: nil
          )
          end

          sig do
            override.returns(
              {
                id: String,
                type:
                  T.nilable(
                    OpenAI::Responses::ResponseInputItem::ItemReference::Type::OrSymbol
                  )
              }
            )
          end
          def to_hash
          end

          # The type of item to reference. Always `item_reference`.
          module Type
            extend OpenAI::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  OpenAI::Responses::ResponseInputItem::ItemReference::Type
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ITEM_REFERENCE =
              T.let(
                :item_reference,
                OpenAI::Responses::ResponseInputItem::ItemReference::Type::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseInputItem::ItemReference::Type::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        sig do
          override.returns(
            T::Array[OpenAI::Responses::ResponseInputItem::Variants]
          )
        end
        def self.variants
        end
      end
    end
  end
end
