# typed: strong

module OpenAI
  module Models
    module Responses
      class ResponseCustomToolCall < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Responses::ResponseCustomToolCall,
              OpenAI::Internal::AnyHash
            )
          end

        # An identifier used to map this custom tool call to a tool call output.
        sig { returns(String) }
        attr_accessor :call_id

        # The input for the custom tool call generated by the model.
        sig { returns(String) }
        attr_accessor :input

        # The name of the custom tool being called.
        sig { returns(String) }
        attr_accessor :name

        # The type of the custom tool call. Always `custom_tool_call`.
        sig { returns(Symbol) }
        attr_accessor :type

        # The unique ID of the custom tool call in the OpenAI platform.
        sig { returns(T.nilable(String)) }
        attr_reader :id

        sig { params(id: String).void }
        attr_writer :id

        # A call to a custom tool created by the model.
        sig do
          params(
            call_id: String,
            input: String,
            name: String,
            id: String,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # An identifier used to map this custom tool call to a tool call output.
          call_id:,
          # The input for the custom tool call generated by the model.
          input:,
          # The name of the custom tool being called.
          name:,
          # The unique ID of the custom tool call in the OpenAI platform.
          id: nil,
          # The type of the custom tool call. Always `custom_tool_call`.
          type: :custom_tool_call
        )
        end

        sig do
          override.returns(
            {
              call_id: String,
              input: String,
              name: String,
              type: Symbol,
              id: String
            }
          )
        end
        def to_hash
        end
      end
    end
  end
end
