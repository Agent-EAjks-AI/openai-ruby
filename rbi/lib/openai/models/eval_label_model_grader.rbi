# typed: strong

module OpenAI
  module Models
    class EvalLabelModelGrader < OpenAI::Internal::Type::BaseModel
      sig { returns(T::Array[OpenAI::Models::EvalLabelModelGrader::Input]) }
      attr_accessor :input

      # The labels to assign to each item in the evaluation.
      sig { returns(T::Array[String]) }
      attr_accessor :labels

      # The model to use for the evaluation. Must support structured outputs.
      sig { returns(String) }
      attr_accessor :model

      # The name of the grader.
      sig { returns(String) }
      attr_accessor :name

      # The labels that indicate a passing result. Must be a subset of labels.
      sig { returns(T::Array[String]) }
      attr_accessor :passing_labels

      # The object type, which is always `label_model`.
      sig { returns(Symbol) }
      attr_accessor :type

      # A LabelModelGrader object which uses a model to assign labels to each item in
      # the evaluation.
      sig do
        params(
          input: T::Array[T.any(OpenAI::Models::EvalLabelModelGrader::Input, OpenAI::Internal::AnyHash)],
          labels: T::Array[String],
          model: String,
          name: String,
          passing_labels: T::Array[String],
          type: Symbol
        )
          .returns(T.attached_class)
      end
      def self.new(
        input:,
        # The labels to assign to each item in the evaluation.
        labels:,
        # The model to use for the evaluation. Must support structured outputs.
        model:,
        # The name of the grader.
        name:,
        # The labels that indicate a passing result. Must be a subset of labels.
        passing_labels:,
        # The object type, which is always `label_model`.
        type: :label_model
      ); end
      sig do
        override
          .returns(
            {
              input: T::Array[OpenAI::Models::EvalLabelModelGrader::Input],
              labels: T::Array[String],
              model: String,
              name: String,
              passing_labels: T::Array[String],
              type: Symbol
            }
          )
      end
      def to_hash; end

      class Input < OpenAI::Internal::Type::BaseModel
        # Text inputs to the model - can contain template strings.
        sig do
          returns(
            T.any(
              String,
              OpenAI::Models::Responses::ResponseInputText,
              OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText
            )
          )
        end
        attr_accessor :content

        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        sig { returns(OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol) }
        attr_accessor :role

        # The type of the message input. Always `message`.
        sig { returns(T.nilable(OpenAI::Models::EvalLabelModelGrader::Input::Type::TaggedSymbol)) }
        attr_reader :type

        sig { params(type: OpenAI::Models::EvalLabelModelGrader::Input::Type::OrSymbol).void }
        attr_writer :type

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role. Messages with the
        # `assistant` role are presumed to have been generated by the model in previous
        # interactions.
        sig do
          params(
            content: T.any(
              String,
              OpenAI::Models::Responses::ResponseInputText,
              OpenAI::Internal::AnyHash,
              OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText
            ),
            role: OpenAI::Models::EvalLabelModelGrader::Input::Role::OrSymbol,
            type: OpenAI::Models::EvalLabelModelGrader::Input::Type::OrSymbol
          )
            .returns(T.attached_class)
        end
        def self.new(
          # Text inputs to the model - can contain template strings.
          content:,
          # The role of the message input. One of `user`, `assistant`, `system`, or
          # `developer`.
          role:,
          # The type of the message input. Always `message`.
          type: nil
        ); end
        sig do
          override
            .returns(
              {
                content: T.any(
                  String,
                  OpenAI::Models::Responses::ResponseInputText,
                  OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText
                ),
                role: OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol,
                type: OpenAI::Models::EvalLabelModelGrader::Input::Type::TaggedSymbol
              }
            )
        end
        def to_hash; end

        # Text inputs to the model - can contain template strings.
        module Content
          extend OpenAI::Internal::Type::Union

          class OutputText < OpenAI::Internal::Type::BaseModel
            # The text output from the model.
            sig { returns(String) }
            attr_accessor :text

            # The type of the output text. Always `output_text`.
            sig { returns(Symbol) }
            attr_accessor :type

            # A text output from the model.
            sig { params(text: String, type: Symbol).returns(T.attached_class) }
            def self.new(
              # The text output from the model.
              text:,
              # The type of the output text. Always `output_text`.
              type: :output_text
            ); end
            sig { override.returns({text: String, type: Symbol}) }
            def to_hash; end
          end

          sig do
            override
              .returns(
                [String, OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText]
              )
          end
          def self.variants; end
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        module Role
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol = T.type_alias { T.all(Symbol, OpenAI::Models::EvalLabelModelGrader::Input::Role) }
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          USER = T.let(:user, OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol)
          ASSISTANT = T.let(:assistant, OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol)
          SYSTEM = T.let(:system, OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol)
          DEVELOPER = T.let(:developer, OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol)

          sig { override.returns(T::Array[OpenAI::Models::EvalLabelModelGrader::Input::Role::TaggedSymbol]) }
          def self.values; end
        end

        # The type of the message input. Always `message`.
        module Type
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol = T.type_alias { T.all(Symbol, OpenAI::Models::EvalLabelModelGrader::Input::Type) }
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          MESSAGE = T.let(:message, OpenAI::Models::EvalLabelModelGrader::Input::Type::TaggedSymbol)

          sig { override.returns(T::Array[OpenAI::Models::EvalLabelModelGrader::Input::Type::TaggedSymbol]) }
          def self.values; end
        end
      end
    end
  end
end
