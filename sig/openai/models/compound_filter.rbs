module OpenAI
  module Models
    type compound_filter =
      {
        filters: ::Array[OpenAI::CompoundFilter::filter],
        type: OpenAI::CompoundFilter::type_
      }

    class CompoundFilter < OpenAI::Internal::Type::BaseModel
      attr_accessor filters: ::Array[OpenAI::CompoundFilter::filter]

      attr_accessor type: OpenAI::CompoundFilter::type_

      def initialize: (
        filters: ::Array[OpenAI::CompoundFilter::filter],
        type: OpenAI::CompoundFilter::type_
      ) -> void

      type filter = OpenAI::ComparisonFilter | top

      module Filter
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> ::Array[OpenAI::CompoundFilter::filter]
      end

      type type_ = :and | :or

      module Type
        extend OpenAI::Internal::Type::Enum

        AND: :and
        OR: :or

        def self?.values: -> ::Array[OpenAI::CompoundFilter::type_]
      end
    end
  end
end
