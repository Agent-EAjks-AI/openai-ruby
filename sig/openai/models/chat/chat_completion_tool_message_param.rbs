module OpenAI
  module Models
    class ChatCompletionToolMessageParam = Chat::ChatCompletionToolMessageParam

    module Chat
      type chat_completion_tool_message_param =
        {
          content: OpenAI::Chat::ChatCompletionToolMessageParam::content,
          role: :tool,
          tool_call_id: String
        }

      class ChatCompletionToolMessageParam < OpenAI::Internal::Type::BaseModel
        attr_accessor content: OpenAI::Chat::ChatCompletionToolMessageParam::content

        attr_accessor role: :tool

        attr_accessor tool_call_id: String

        def initialize: (
          content: OpenAI::Chat::ChatCompletionToolMessageParam::content,
          tool_call_id: String,
          ?role: :tool
        ) -> void

        type content =
          String | ::Array[OpenAI::Chat::ChatCompletionContentPartText]

        module Content
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Chat::ChatCompletionToolMessageParam::content]

          ChatCompletionContentPartTextArray: OpenAI::Internal::Type::Converter
        end
      end
    end
  end
end
