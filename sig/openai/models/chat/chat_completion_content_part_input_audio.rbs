module OpenAI
  module Models
    class ChatCompletionContentPartInputAudio = Chat::ChatCompletionContentPartInputAudio

    module Chat
      type chat_completion_content_part_input_audio =
        {
          input_audio: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio,
          type: :input_audio
        }

      class ChatCompletionContentPartInputAudio < OpenAI::Internal::Type::BaseModel
        attr_accessor input_audio: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio

        attr_accessor type: :input_audio

        def initialize: (
          input_audio: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio,
          ?type: :input_audio
        ) -> void

        type input_audio =
          {
            data: String,
            format_: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio::format_
          }

        class InputAudio < OpenAI::Internal::Type::BaseModel
          attr_accessor data: String

          attr_accessor format_: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio::format_

          def initialize: (
            data: String,
            format_: OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio::format_
          ) -> void

          type format_ = :wav | :mp3

          module Format
            extend OpenAI::Internal::Type::Enum

            WAV: :wav
            MP3: :mp3

            def self?.values: -> ::Array[OpenAI::Chat::ChatCompletionContentPartInputAudio::InputAudio::format_]
          end
        end
      end
    end
  end
end
