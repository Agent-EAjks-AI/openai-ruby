module OpenAI
  module Models
    type completion_usage =
      {
        completion_tokens: Integer,
        prompt_tokens: Integer,
        total_tokens: Integer,
        completion_tokens_details: OpenAI::CompletionUsage::CompletionTokensDetails,
        prompt_tokens_details: OpenAI::CompletionUsage::PromptTokensDetails
      }

    class CompletionUsage < OpenAI::Internal::Type::BaseModel
      attr_accessor completion_tokens: Integer

      attr_accessor prompt_tokens: Integer

      attr_accessor total_tokens: Integer

      attr_reader completion_tokens_details: OpenAI::CompletionUsage::CompletionTokensDetails?

      def completion_tokens_details=: (
        OpenAI::CompletionUsage::CompletionTokensDetails
      ) -> OpenAI::CompletionUsage::CompletionTokensDetails

      attr_reader prompt_tokens_details: OpenAI::CompletionUsage::PromptTokensDetails?

      def prompt_tokens_details=: (
        OpenAI::CompletionUsage::PromptTokensDetails
      ) -> OpenAI::CompletionUsage::PromptTokensDetails

      def initialize: (
        completion_tokens: Integer,
        prompt_tokens: Integer,
        total_tokens: Integer,
        ?completion_tokens_details: OpenAI::CompletionUsage::CompletionTokensDetails,
        ?prompt_tokens_details: OpenAI::CompletionUsage::PromptTokensDetails
      ) -> void

      def to_hash: -> {
        completion_tokens: Integer,
        prompt_tokens: Integer,
        total_tokens: Integer,
        completion_tokens_details: OpenAI::CompletionUsage::CompletionTokensDetails,
        prompt_tokens_details: OpenAI::CompletionUsage::PromptTokensDetails
      }

      type completion_tokens_details =
        {
          accepted_prediction_tokens: Integer,
          audio_tokens: Integer,
          reasoning_tokens: Integer,
          rejected_prediction_tokens: Integer
        }

      class CompletionTokensDetails < OpenAI::Internal::Type::BaseModel
        attr_reader accepted_prediction_tokens: Integer?

        def accepted_prediction_tokens=: (Integer) -> Integer

        attr_reader audio_tokens: Integer?

        def audio_tokens=: (Integer) -> Integer

        attr_reader reasoning_tokens: Integer?

        def reasoning_tokens=: (Integer) -> Integer

        attr_reader rejected_prediction_tokens: Integer?

        def rejected_prediction_tokens=: (Integer) -> Integer

        def initialize: (
          ?accepted_prediction_tokens: Integer,
          ?audio_tokens: Integer,
          ?reasoning_tokens: Integer,
          ?rejected_prediction_tokens: Integer
        ) -> void

        def to_hash: -> {
          accepted_prediction_tokens: Integer,
          audio_tokens: Integer,
          reasoning_tokens: Integer,
          rejected_prediction_tokens: Integer
        }
      end

      type prompt_tokens_details =
        { audio_tokens: Integer, cached_tokens: Integer }

      class PromptTokensDetails < OpenAI::Internal::Type::BaseModel
        attr_reader audio_tokens: Integer?

        def audio_tokens=: (Integer) -> Integer

        attr_reader cached_tokens: Integer?

        def cached_tokens=: (Integer) -> Integer

        def initialize: (
          ?audio_tokens: Integer,
          ?cached_tokens: Integer
        ) -> void

        def to_hash: -> { audio_tokens: Integer, cached_tokens: Integer }
      end
    end
  end
end
