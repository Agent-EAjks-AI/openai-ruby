module OpenAI
  module Models
    type eval_label_model_grader =
      {
        input: ::Array[OpenAI::Models::EvalLabelModelGrader::Input],
        labels: ::Array[String],
        model: String,
        name: String,
        passing_labels: ::Array[String],
        type: :label_model
      }

    class EvalLabelModelGrader < OpenAI::Internal::Type::BaseModel
      attr_accessor input: ::Array[OpenAI::Models::EvalLabelModelGrader::Input]

      attr_accessor labels: ::Array[String]

      attr_accessor model: String

      attr_accessor name: String

      attr_accessor passing_labels: ::Array[String]

      attr_accessor type: :label_model

      def initialize: (
        input: ::Array[OpenAI::Models::EvalLabelModelGrader::Input],
        labels: ::Array[String],
        model: String,
        name: String,
        passing_labels: ::Array[String],
        ?type: :label_model
      ) -> void

      def to_hash: -> OpenAI::Models::eval_label_model_grader

      type input =
        {
          content: OpenAI::Models::EvalLabelModelGrader::Input::content,
          role: OpenAI::Models::EvalLabelModelGrader::Input::role,
          type: OpenAI::Models::EvalLabelModelGrader::Input::type_
        }

      class Input < OpenAI::Internal::Type::BaseModel
        attr_accessor content: OpenAI::Models::EvalLabelModelGrader::Input::content

        attr_accessor role: OpenAI::Models::EvalLabelModelGrader::Input::role

        attr_reader type: OpenAI::Models::EvalLabelModelGrader::Input::type_?

        def type=: (
          OpenAI::Models::EvalLabelModelGrader::Input::type_
        ) -> OpenAI::Models::EvalLabelModelGrader::Input::type_

        def initialize: (
          content: OpenAI::Models::EvalLabelModelGrader::Input::content,
          role: OpenAI::Models::EvalLabelModelGrader::Input::role,
          ?type: OpenAI::Models::EvalLabelModelGrader::Input::type_
        ) -> void

        def to_hash: -> OpenAI::Models::EvalLabelModelGrader::input

        type content =
          String
          | OpenAI::Models::Responses::ResponseInputText
          | OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText

        module Content
          extend OpenAI::Internal::Type::Union

          type output_text = { text: String, type: :output_text }

          class OutputText < OpenAI::Internal::Type::BaseModel
            attr_accessor text: String

            attr_accessor type: :output_text

            def initialize: (text: String, ?type: :output_text) -> void

            def to_hash: -> OpenAI::Models::EvalLabelModelGrader::Input::Content::output_text
          end

          def self?.variants: -> [String, OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::EvalLabelModelGrader::Input::Content::OutputText]
        end

        type role = :user | :assistant | :system | :developer

        module Role
          extend OpenAI::Internal::Type::Enum

          USER: :user
          ASSISTANT: :assistant
          SYSTEM: :system
          DEVELOPER: :developer

          def self?.values: -> ::Array[OpenAI::Models::EvalLabelModelGrader::Input::role]
        end

        type type_ = :message

        module Type
          extend OpenAI::Internal::Type::Enum

          MESSAGE: :message

          def self?.values: -> ::Array[OpenAI::Models::EvalLabelModelGrader::Input::type_]
        end
      end
    end
  end
end
