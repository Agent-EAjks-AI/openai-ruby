module OpenAI
  module Models
    type vector_store_create_params =
      {
        chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
        expires_after: OpenAI::VectorStoreExpirationAfter,
        file_ids: ::Array[String],
        metadata: OpenAI::Models::metadata?,
        name: String
      }
      & OpenAI::Internal::Type::request_parameters

    class VectorStoreCreateParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_reader chunking_strategy: OpenAI::Models::file_chunking_strategy_param?

      def chunking_strategy=: (
        OpenAI::Models::file_chunking_strategy_param
      ) -> OpenAI::Models::file_chunking_strategy_param

      attr_reader expires_after: OpenAI::VectorStoreExpirationAfter?

      def expires_after=: (
        OpenAI::VectorStoreExpirationAfter
      ) -> OpenAI::VectorStoreExpirationAfter

      attr_reader file_ids: ::Array[String]?

      def file_ids=: (::Array[String]) -> ::Array[String]

      attr_accessor metadata: OpenAI::Models::metadata?

      attr_reader name: String?

      def name=: (String) -> String

      def initialize: (
        ?chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
        ?expires_after: OpenAI::VectorStoreExpirationAfter,
        ?file_ids: ::Array[String],
        ?metadata: OpenAI::Models::metadata?,
        ?name: String,
        ?request_options: OpenAI::request_opts
      ) -> void
    end
  end
end
