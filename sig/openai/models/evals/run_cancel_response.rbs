module OpenAI
  module Models
    module Evals
      type run_cancel_response =
        {
          id: String,
          created_at: Integer,
          data_source: OpenAI::Models::Evals::RunCancelResponse::data_source,
          error: OpenAI::Evals::EvalAPIError,
          eval_id: String,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String,
          object: :"eval.run",
          per_model_usage: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerModelUsage],
          per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerTestingCriteriaResult],
          report_url: String,
          result_counts: OpenAI::Models::Evals::RunCancelResponse::ResultCounts,
          status: String
        }

      class RunCancelResponse < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Integer

        attr_accessor data_source: OpenAI::Models::Evals::RunCancelResponse::data_source

        attr_accessor error: OpenAI::Evals::EvalAPIError

        attr_accessor eval_id: String

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor model: String

        attr_accessor name: String

        attr_accessor object: :"eval.run"

        attr_accessor per_model_usage: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerModelUsage]

        attr_accessor per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerTestingCriteriaResult]

        attr_accessor report_url: String

        attr_accessor result_counts: OpenAI::Models::Evals::RunCancelResponse::ResultCounts

        attr_accessor status: String

        def initialize: (
          id: String,
          created_at: Integer,
          data_source: OpenAI::Models::Evals::RunCancelResponse::data_source,
          error: OpenAI::Evals::EvalAPIError,
          eval_id: String,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String,
          per_model_usage: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerModelUsage],
          per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunCancelResponse::PerTestingCriteriaResult],
          report_url: String,
          result_counts: OpenAI::Models::Evals::RunCancelResponse::ResultCounts,
          status: String,
          ?object: :"eval.run"
        ) -> void

        type data_source =
          OpenAI::Evals::CreateEvalJSONLRunDataSource
          | OpenAI::Evals::CreateEvalCompletionsRunDataSource
          | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions

        module DataSource
          extend OpenAI::Internal::Type::Union

          type completions =
            {
              source: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::source,
              type: :completions,
              input_messages: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages,
              model: String,
              sampling_params: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::SamplingParams
            }

          class Completions < OpenAI::Internal::Type::BaseModel
            attr_accessor source: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::source

            attr_accessor type: :completions

            attr_reader input_messages: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages?

            def input_messages=: (
              OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages
            ) -> OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages

            attr_reader model: String?

            def model=: (String) -> String

            attr_reader sampling_params: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::SamplingParams?

            def sampling_params=: (
              OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::SamplingParams
            ) -> OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::SamplingParams

            def initialize: (
              source: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::source,
              ?input_messages: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages,
              ?model: String,
              ?sampling_params: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::SamplingParams,
              ?type: :completions
            ) -> void

            type source =
              OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::FileContent
              | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::FileID
              | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::Responses

            module Source
              extend OpenAI::Internal::Type::Union

              type file_content =
                {
                  content: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::FileContent::Content],
                  type: :file_content
                }

              class FileContent < OpenAI::Internal::Type::BaseModel
                attr_accessor content: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::FileContent::Content]

                attr_accessor type: :file_content

                def initialize: (
                  content: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::Source::FileContent::Content],
                  ?type: :file_content
                ) -> void

                type content =
                  { item: ::Hash[Symbol, top], sample: ::Hash[Symbol, top] }

                class Content < OpenAI::Internal::Type::BaseModel
                  attr_accessor item: ::Hash[Symbol, top]

                  attr_reader sample: ::Hash[Symbol, top]?

                  def sample=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

                  def initialize: (
                    item: ::Hash[Symbol, top],
                    ?sample: ::Hash[Symbol, top]
                  ) -> void
                end
              end

              type file_id = { id: String, type: :file_id }

              class FileID < OpenAI::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor type: :file_id

                def initialize: (id: String, ?type: :file_id) -> void
              end

              type responses =
                {
                  type: :responses,
                  allow_parallel_tool_calls: bool?,
                  created_after: Integer?,
                  created_before: Integer?,
                  has_tool_calls: bool?,
                  instructions_search: String?,
                  metadata: top?,
                  model: String?,
                  reasoning_effort: OpenAI::Models::reasoning_effort?,
                  temperature: Float?,
                  top_p: Float?,
                  users: ::Array[String]?
                }

              class Responses < OpenAI::Internal::Type::BaseModel
                attr_accessor type: :responses

                attr_accessor allow_parallel_tool_calls: bool?

                attr_accessor created_after: Integer?

                attr_accessor created_before: Integer?

                attr_accessor has_tool_calls: bool?

                attr_accessor instructions_search: String?

                attr_accessor metadata: top?

                attr_accessor model: String?

                attr_accessor reasoning_effort: OpenAI::Models::reasoning_effort?

                attr_accessor temperature: Float?

                attr_accessor top_p: Float?

                attr_accessor users: ::Array[String]?

                def initialize: (
                  ?allow_parallel_tool_calls: bool?,
                  ?created_after: Integer?,
                  ?created_before: Integer?,
                  ?has_tool_calls: bool?,
                  ?instructions_search: String?,
                  ?metadata: top?,
                  ?model: String?,
                  ?reasoning_effort: OpenAI::Models::reasoning_effort?,
                  ?temperature: Float?,
                  ?top_p: Float?,
                  ?users: ::Array[String]?,
                  ?type: :responses
                ) -> void
              end

              def self?.variants: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::source]
            end

            type input_messages =
              OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template
              | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::ItemReference

            module InputMessages
              extend OpenAI::Internal::Type::Union

              type template =
                {
                  template: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::template],
                  type: :template
                }

              class Template < OpenAI::Internal::Type::BaseModel
                attr_accessor template: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::template]

                attr_accessor type: :template

                def initialize: (
                  template: ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::template],
                  ?type: :template
                ) -> void

                type template =
                  OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::ChatMessage
                  | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem

                module Template
                  extend OpenAI::Internal::Type::Union

                  type chat_message = { content: String, role: String }

                  class ChatMessage < OpenAI::Internal::Type::BaseModel
                    attr_accessor content: String

                    attr_accessor role: String

                    def initialize: (content: String, role: String) -> void
                  end

                  type eval_item =
                    {
                      content: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::content,
                      role: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::role,
                      type: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_
                    }

                  class EvalItem < OpenAI::Internal::Type::BaseModel
                    attr_accessor content: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::content

                    attr_accessor role: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::role

                    attr_reader type: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_?

                    def type=: (
                      OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_
                    ) -> OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_

                    def initialize: (
                      content: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::content,
                      role: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::role,
                      ?type: OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_
                    ) -> void

                    type content =
                      String
                      | OpenAI::Responses::ResponseInputText
                      | OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::Content::OutputText

                    module Content
                      extend OpenAI::Internal::Type::Union

                      type output_text = { text: String, type: :output_text }

                      class OutputText < OpenAI::Internal::Type::BaseModel
                        attr_accessor text: String

                        attr_accessor type: :output_text

                        def initialize: (
                          text: String,
                          ?type: :output_text
                        ) -> void
                      end

                      def self?.variants: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::content]
                    end

                    type role = :user | :assistant | :system | :developer

                    module Role
                      extend OpenAI::Internal::Type::Enum

                      USER: :user
                      ASSISTANT: :assistant
                      SYSTEM: :system
                      DEVELOPER: :developer

                      def self?.values: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::role]
                    end

                    type type_ = :message

                    module Type
                      extend OpenAI::Internal::Type::Enum

                      MESSAGE: :message

                      def self?.values: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::Template::EvalItem::type_]
                    end
                  end

                  def self?.variants: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::InputMessages::Template::template]
                end
              end

              type item_reference =
                { item_reference: String, type: :item_reference }

              class ItemReference < OpenAI::Internal::Type::BaseModel
                attr_accessor item_reference: String

                attr_accessor type: :item_reference

                def initialize: (
                  item_reference: String,
                  ?type: :item_reference
                ) -> void
              end

              def self?.variants: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::DataSource::Completions::input_messages]
            end

            type sampling_params =
              {
                max_completion_tokens: Integer,
                seed: Integer,
                temperature: Float,
                top_p: Float
              }

            class SamplingParams < OpenAI::Internal::Type::BaseModel
              attr_reader max_completion_tokens: Integer?

              def max_completion_tokens=: (Integer) -> Integer

              attr_reader seed: Integer?

              def seed=: (Integer) -> Integer

              attr_reader temperature: Float?

              def temperature=: (Float) -> Float

              attr_reader top_p: Float?

              def top_p=: (Float) -> Float

              def initialize: (
                ?max_completion_tokens: Integer,
                ?seed: Integer,
                ?temperature: Float,
                ?top_p: Float
              ) -> void
            end
          end

          def self?.variants: -> ::Array[OpenAI::Models::Evals::RunCancelResponse::data_source]
        end

        type per_model_usage =
          {
            cached_tokens: Integer,
            completion_tokens: Integer,
            invocation_count: Integer,
            model_name: String,
            prompt_tokens: Integer,
            total_tokens: Integer
          }

        class PerModelUsage < OpenAI::Internal::Type::BaseModel
          attr_accessor cached_tokens: Integer

          attr_accessor completion_tokens: Integer

          attr_accessor invocation_count: Integer

          attr_accessor model_name: String

          attr_accessor prompt_tokens: Integer

          attr_accessor total_tokens: Integer

          def initialize: (
            cached_tokens: Integer,
            completion_tokens: Integer,
            invocation_count: Integer,
            model_name: String,
            prompt_tokens: Integer,
            total_tokens: Integer
          ) -> void
        end

        type per_testing_criteria_result =
          { failed: Integer, passed: Integer, testing_criteria: String }

        class PerTestingCriteriaResult < OpenAI::Internal::Type::BaseModel
          attr_accessor failed: Integer

          attr_accessor passed: Integer

          attr_accessor testing_criteria: String

          def initialize: (
            failed: Integer,
            passed: Integer,
            testing_criteria: String
          ) -> void
        end

        type result_counts =
          { errored: Integer, failed: Integer, passed: Integer, total: Integer }

        class ResultCounts < OpenAI::Internal::Type::BaseModel
          attr_accessor errored: Integer

          attr_accessor failed: Integer

          attr_accessor passed: Integer

          attr_accessor total: Integer

          def initialize: (
            errored: Integer,
            failed: Integer,
            passed: Integer,
            total: Integer
          ) -> void
        end
      end
    end
  end
end
