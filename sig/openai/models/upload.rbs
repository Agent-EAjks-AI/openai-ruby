module OpenAI
  module Models
    type upload =
      {
        id: String,
        bytes: Integer,
        created_at: Integer,
        expires_at: Integer,
        filename: String,
        object: :upload,
        purpose: String,
        status: OpenAI::Upload::status,
        file: OpenAI::FileObject?
      }

    class Upload < OpenAI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor bytes: Integer

      attr_accessor created_at: Integer

      attr_accessor expires_at: Integer

      attr_accessor filename: String

      attr_accessor object: :upload

      attr_accessor purpose: String

      attr_accessor status: OpenAI::Upload::status

      attr_accessor file: OpenAI::FileObject?

      def initialize: (
        id: String,
        bytes: Integer,
        created_at: Integer,
        expires_at: Integer,
        filename: String,
        purpose: String,
        status: OpenAI::Upload::status,
        ?file: OpenAI::FileObject?,
        ?object: :upload
      ) -> void

      type status = :pending | :completed | :cancelled | :expired

      module Status
        extend OpenAI::Internal::Type::Enum

        PENDING: :pending
        COMPLETED: :completed
        CANCELLED: :cancelled
        EXPIRED: :expired

        def self?.values: -> ::Array[OpenAI::Upload::status]
      end
    end
  end
end
