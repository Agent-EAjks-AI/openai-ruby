module OpenAI
  module Models
    module Audio
      type transcription_text_done_event =
        {
          text: String,
          type: :"transcript.text.done",
          logprobs: ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob],
          usage: OpenAI::Audio::TranscriptionTextDoneEvent::Usage
        }

      class TranscriptionTextDoneEvent < OpenAI::Internal::Type::BaseModel
        attr_accessor text: String

        attr_accessor type: :"transcript.text.done"

        attr_reader logprobs: ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob]?

        def logprobs=: (
          ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob]
        ) -> ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob]

        attr_reader usage: OpenAI::Audio::TranscriptionTextDoneEvent::Usage?

        def usage=: (
          OpenAI::Audio::TranscriptionTextDoneEvent::Usage
        ) -> OpenAI::Audio::TranscriptionTextDoneEvent::Usage

        def initialize: (
          text: String,
          ?logprobs: ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob],
          ?usage: OpenAI::Audio::TranscriptionTextDoneEvent::Usage,
          ?type: :"transcript.text.done"
        ) -> void

        def to_hash: -> {
          text: String,
          type: :"transcript.text.done",
          logprobs: ::Array[OpenAI::Audio::TranscriptionTextDoneEvent::Logprob],
          usage: OpenAI::Audio::TranscriptionTextDoneEvent::Usage
        }

        type logprob =
          { token: String, bytes: ::Array[Integer], logprob: Float }

        class Logprob < OpenAI::Internal::Type::BaseModel
          attr_reader token: String?

          def token=: (String) -> String

          attr_reader bytes: ::Array[Integer]?

          def bytes=: (::Array[Integer]) -> ::Array[Integer]

          attr_reader logprob: Float?

          def logprob=: (Float) -> Float

          def initialize: (
            ?token: String,
            ?bytes: ::Array[Integer],
            ?logprob: Float
          ) -> void

          def to_hash: -> {
            token: String,
            bytes: ::Array[Integer],
            logprob: Float
          }
        end

        type usage =
          {
            input_tokens: Integer,
            output_tokens: Integer,
            total_tokens: Integer,
            type: :tokens,
            input_token_details: OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails
          }

        class Usage < OpenAI::Internal::Type::BaseModel
          attr_accessor input_tokens: Integer

          attr_accessor output_tokens: Integer

          attr_accessor total_tokens: Integer

          attr_accessor type: :tokens

          attr_reader input_token_details: OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails?

          def input_token_details=: (
            OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails
          ) -> OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails

          def initialize: (
            input_tokens: Integer,
            output_tokens: Integer,
            total_tokens: Integer,
            ?input_token_details: OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails,
            ?type: :tokens
          ) -> void

          def to_hash: -> {
            input_tokens: Integer,
            output_tokens: Integer,
            total_tokens: Integer,
            type: :tokens,
            input_token_details: OpenAI::Audio::TranscriptionTextDoneEvent::Usage::InputTokenDetails
          }

          type input_token_details =
            { audio_tokens: Integer, text_tokens: Integer }

          class InputTokenDetails < OpenAI::Internal::Type::BaseModel
            attr_reader audio_tokens: Integer?

            def audio_tokens=: (Integer) -> Integer

            attr_reader text_tokens: Integer?

            def text_tokens=: (Integer) -> Integer

            def initialize: (
              ?audio_tokens: Integer,
              ?text_tokens: Integer
            ) -> void

            def to_hash: -> { audio_tokens: Integer, text_tokens: Integer }
          end
        end
      end
    end
  end
end
