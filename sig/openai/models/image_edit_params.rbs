module OpenAI
  module Models
    type image_edit_params =
      {
        image: OpenAI::Models::ImageEditParams::image,
        prompt: String,
        mask: (Pathname | StringIO),
        model: OpenAI::Models::ImageEditParams::model?,
        n: Integer?,
        quality: OpenAI::Models::ImageEditParams::quality?,
        response_format: OpenAI::Models::ImageEditParams::response_format?,
        size: OpenAI::Models::ImageEditParams::size?,
        user: String
      }
      & OpenAI::Internal::Type::request_parameters

    class ImageEditParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_accessor image: OpenAI::Models::ImageEditParams::image

      attr_accessor prompt: String

      attr_reader mask: (Pathname | StringIO)?

      def mask=: (Pathname | StringIO) -> (Pathname | StringIO)

      attr_accessor model: OpenAI::Models::ImageEditParams::model?

      attr_accessor n: Integer?

      attr_accessor quality: OpenAI::Models::ImageEditParams::quality?

      attr_accessor response_format: OpenAI::Models::ImageEditParams::response_format?

      attr_accessor size: OpenAI::Models::ImageEditParams::size?

      attr_reader user: String?

      def user=: (String) -> String

      def initialize: (
        image: OpenAI::Models::ImageEditParams::image,
        prompt: String,
        ?mask: Pathname | StringIO,
        ?model: OpenAI::Models::ImageEditParams::model?,
        ?n: Integer?,
        ?quality: OpenAI::Models::ImageEditParams::quality?,
        ?response_format: OpenAI::Models::ImageEditParams::response_format?,
        ?size: OpenAI::Models::ImageEditParams::size?,
        ?user: String,
        ?request_options: OpenAI::request_opts
      ) -> void

      def to_hash: -> OpenAI::Models::image_edit_params

      type image = Pathname | StringIO | ::Array[Pathname | StringIO]

      module Image
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> [StringIO, ::Array[StringIO]]

        type string_array = ::Array[Pathname | StringIO]

        StringArray: string_array
      end

      type model = String | OpenAI::Models::image_model

      module Model
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> [String, OpenAI::Models::image_model]
      end

      type quality = :standard | :low | :medium | :high | :auto

      module Quality
        extend OpenAI::Internal::Type::Enum

        STANDARD: :standard
        LOW: :low
        MEDIUM: :medium
        HIGH: :high
        AUTO: :auto

        def self?.values: -> ::Array[OpenAI::Models::ImageEditParams::quality]
      end

      type response_format = :url | :b64_json

      module ResponseFormat
        extend OpenAI::Internal::Type::Enum

        URL: :url
        B64_JSON: :b64_json

        def self?.values: -> ::Array[OpenAI::Models::ImageEditParams::response_format]
      end

      type size = :"256x256" | :"512x512" | :"1024x1024"

      module Size
        extend OpenAI::Internal::Type::Enum

        SIZE_256X256: :"256x256"
        SIZE_512X512: :"512x512"
        SIZE_1024X1024: :"1024x1024"

        def self?.values: -> ::Array[OpenAI::Models::ImageEditParams::size]
      end
    end
  end
end
