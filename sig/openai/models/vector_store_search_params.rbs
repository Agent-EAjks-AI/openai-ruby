module OpenAI
  module Models
    type vector_store_search_params =
      {
        query: OpenAI::Models::VectorStoreSearchParams::query,
        filters: OpenAI::Models::VectorStoreSearchParams::filters,
        max_num_results: Integer,
        ranking_options: OpenAI::VectorStoreSearchParams::RankingOptions,
        rewrite_query: bool
      }
      & OpenAI::Internal::Type::request_parameters

    class VectorStoreSearchParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_accessor query: OpenAI::Models::VectorStoreSearchParams::query

      attr_reader filters: OpenAI::Models::VectorStoreSearchParams::filters?

      def filters=: (
        OpenAI::Models::VectorStoreSearchParams::filters
      ) -> OpenAI::Models::VectorStoreSearchParams::filters

      attr_reader max_num_results: Integer?

      def max_num_results=: (Integer) -> Integer

      attr_reader ranking_options: OpenAI::VectorStoreSearchParams::RankingOptions?

      def ranking_options=: (
        OpenAI::VectorStoreSearchParams::RankingOptions
      ) -> OpenAI::VectorStoreSearchParams::RankingOptions

      attr_reader rewrite_query: bool?

      def rewrite_query=: (bool) -> bool

      def initialize: (
        query: OpenAI::Models::VectorStoreSearchParams::query,
        ?filters: OpenAI::Models::VectorStoreSearchParams::filters,
        ?max_num_results: Integer,
        ?ranking_options: OpenAI::VectorStoreSearchParams::RankingOptions,
        ?rewrite_query: bool,
        ?request_options: OpenAI::request_opts
      ) -> void

      def to_hash: -> {
        query: OpenAI::Models::VectorStoreSearchParams::query,
        filters: OpenAI::Models::VectorStoreSearchParams::filters,
        max_num_results: Integer,
        ranking_options: OpenAI::VectorStoreSearchParams::RankingOptions,
        rewrite_query: bool,
        request_options: OpenAI::RequestOptions
      }

      type query = String | ::Array[String]

      module Query
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> ::Array[OpenAI::Models::VectorStoreSearchParams::query]

        StringArray: OpenAI::Internal::Type::Converter
      end

      type filters = OpenAI::ComparisonFilter | OpenAI::CompoundFilter

      module Filters
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> ::Array[OpenAI::Models::VectorStoreSearchParams::filters]
      end

      type ranking_options =
        {
          ranker: OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker,
          score_threshold: Float
        }

      class RankingOptions < OpenAI::Internal::Type::BaseModel
        attr_reader ranker: OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker?

        def ranker=: (
          OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker
        ) -> OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker

        attr_reader score_threshold: Float?

        def score_threshold=: (Float) -> Float

        def initialize: (
          ?ranker: OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker,
          ?score_threshold: Float
        ) -> void

        def to_hash: -> {
          ranker: OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker,
          score_threshold: Float
        }

        type ranker = :auto | :"default-2024-11-15"

        module Ranker
          extend OpenAI::Internal::Type::Enum

          AUTO: :auto
          DEFAULT_2024_11_15: :"default-2024-11-15"

          def self?.values: -> ::Array[OpenAI::Models::VectorStoreSearchParams::RankingOptions::ranker]
        end
      end
    end
  end
end
