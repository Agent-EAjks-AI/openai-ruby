module OpenAI
  module Models
    type eval_update_response =
      {
        id: String,
        created_at: Integer,
        data_source_config: OpenAI::Models::EvalUpdateResponse::data_source_config,
        metadata: OpenAI::Models::metadata?,
        name: String,
        object: :eval,
        testing_criteria: ::Array[OpenAI::Models::EvalUpdateResponse::testing_criterion]
      }

    class EvalUpdateResponse < OpenAI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Integer

      attr_accessor data_source_config: OpenAI::Models::EvalUpdateResponse::data_source_config

      attr_accessor metadata: OpenAI::Models::metadata?

      attr_accessor name: String

      attr_accessor object: :eval

      attr_accessor testing_criteria: ::Array[OpenAI::Models::EvalUpdateResponse::testing_criterion]

      def initialize: (
        id: String,
        created_at: Integer,
        data_source_config: OpenAI::Models::EvalUpdateResponse::data_source_config,
        metadata: OpenAI::Models::metadata?,
        name: String,
        testing_criteria: ::Array[OpenAI::Models::EvalUpdateResponse::testing_criterion],
        ?object: :eval
      ) -> void

      type data_source_config =
        OpenAI::EvalCustomDataSourceConfig
        | OpenAI::EvalStoredCompletionsDataSourceConfig

      module DataSourceConfig
        extend OpenAI::Internal::Type::Union

        def self?.variants: -> ::Array[OpenAI::Models::EvalUpdateResponse::data_source_config]
      end

      type testing_criterion =
        OpenAI::Graders::LabelModelGrader
        | OpenAI::Graders::StringCheckGrader
        | OpenAI::Models::EvalUpdateResponse::TestingCriterion::EvalGraderTextSimilarity
        | OpenAI::Models::EvalUpdateResponse::TestingCriterion::EvalGraderPython
        | OpenAI::Models::EvalUpdateResponse::TestingCriterion::EvalGraderScoreModel

      module TestingCriterion
        extend OpenAI::Internal::Type::Union

        type eval_grader_text_similarity = { pass_threshold: Float }

        class EvalGraderTextSimilarity < OpenAI::Models::Graders::TextSimilarityGrader
          def pass_threshold: -> Float

          def pass_threshold=: (Float _) -> Float

          def initialize: (pass_threshold: Float) -> void
        end

        type eval_grader_python = { pass_threshold: Float }

        class EvalGraderPython < OpenAI::Models::Graders::PythonGrader
          def pass_threshold: -> Float?

          def pass_threshold=: (Float _) -> Float

          def initialize: (?pass_threshold: Float) -> void
        end

        type eval_grader_score_model = { pass_threshold: Float }

        class EvalGraderScoreModel < OpenAI::Models::Graders::ScoreModelGrader
          def pass_threshold: -> Float?

          def pass_threshold=: (Float _) -> Float

          def initialize: (?pass_threshold: Float) -> void
        end

        def self?.variants: -> ::Array[OpenAI::Models::EvalUpdateResponse::testing_criterion]
      end
    end
  end
end
