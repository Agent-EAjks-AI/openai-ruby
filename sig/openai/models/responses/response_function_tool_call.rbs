module OpenAI
  module Models
    module Responses
      type response_function_tool_call =
        {
          arguments: String,
          call_id: String,
          name: String,
          type: :function_call,
          id: String,
          status: OpenAI::Responses::ResponseFunctionToolCall::status
        }

      class ResponseFunctionToolCall < OpenAI::Internal::Type::BaseModel
        attr_accessor arguments: String

        attr_accessor call_id: String

        attr_accessor name: String

        attr_accessor type: :function_call

        attr_reader id: String?

        def id=: (String) -> String

        attr_reader status: OpenAI::Responses::ResponseFunctionToolCall::status?

        def status=: (
          OpenAI::Responses::ResponseFunctionToolCall::status
        ) -> OpenAI::Responses::ResponseFunctionToolCall::status

        def initialize: (
          arguments: String,
          call_id: String,
          name: String,
          ?id: String,
          ?status: OpenAI::Responses::ResponseFunctionToolCall::status,
          ?type: :function_call
        ) -> void

        type status = :in_progress | :completed | :incomplete

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          INCOMPLETE: :incomplete

          def self?.values: -> ::Array[OpenAI::Responses::ResponseFunctionToolCall::status]
        end
      end
    end
  end
end
