module OpenAI
  module Models
    module Responses
      type response_content_part_done_event =
        {
          content_index: Integer,
          item_id: String,
          output_index: Integer,
          part: OpenAI::Responses::ResponseContentPartDoneEvent::part,
          type: :"response.content_part.done"
        }

      class ResponseContentPartDoneEvent < OpenAI::Internal::Type::BaseModel
        attr_accessor content_index: Integer

        attr_accessor item_id: String

        attr_accessor output_index: Integer

        attr_accessor part: OpenAI::Responses::ResponseContentPartDoneEvent::part

        attr_accessor type: :"response.content_part.done"

        def initialize: (
          content_index: Integer,
          item_id: String,
          output_index: Integer,
          part: OpenAI::Responses::ResponseContentPartDoneEvent::part,
          ?type: :"response.content_part.done"
        ) -> void

        type part =
          OpenAI::Responses::ResponseOutputText
          | OpenAI::Responses::ResponseOutputRefusal

        module Part
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Responses::ResponseContentPartDoneEvent::part]
        end
      end
    end
  end
end
