module OpenAI
  module Models
    module Responses
      type response_reasoning_item =
        {
          id: String,
          summary: ::Array[OpenAI::Responses::ResponseReasoningItem::Summary],
          type: :reasoning,
          encrypted_content: String?,
          status: OpenAI::Responses::ResponseReasoningItem::status
        }

      class ResponseReasoningItem < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor summary: ::Array[OpenAI::Responses::ResponseReasoningItem::Summary]

        attr_accessor type: :reasoning

        attr_accessor encrypted_content: String?

        attr_reader status: OpenAI::Responses::ResponseReasoningItem::status?

        def status=: (
          OpenAI::Responses::ResponseReasoningItem::status
        ) -> OpenAI::Responses::ResponseReasoningItem::status

        def initialize: (
          id: String,
          summary: ::Array[OpenAI::Responses::ResponseReasoningItem::Summary],
          ?encrypted_content: String?,
          ?status: OpenAI::Responses::ResponseReasoningItem::status,
          ?type: :reasoning
        ) -> void

        type summary = { text: String, type: :summary_text }

        class Summary < OpenAI::Internal::Type::BaseModel
          attr_accessor text: String

          attr_accessor type: :summary_text

          def initialize: (text: String, ?type: :summary_text) -> void
        end

        type status = :in_progress | :completed | :incomplete

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          INCOMPLETE: :incomplete

          def self?.values: -> ::Array[OpenAI::Responses::ResponseReasoningItem::status]
        end
      end
    end
  end
end
