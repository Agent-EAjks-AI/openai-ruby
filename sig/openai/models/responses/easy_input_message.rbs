module OpenAI
  module Models
    module Responses
      type easy_input_message =
        {
          content: OpenAI::Responses::EasyInputMessage::content,
          role: OpenAI::Responses::EasyInputMessage::role,
          type: OpenAI::Responses::EasyInputMessage::type_
        }

      class EasyInputMessage < OpenAI::Internal::Type::BaseModel
        attr_accessor content: OpenAI::Responses::EasyInputMessage::content

        attr_accessor role: OpenAI::Responses::EasyInputMessage::role

        attr_reader type: OpenAI::Responses::EasyInputMessage::type_?

        def type=: (
          OpenAI::Responses::EasyInputMessage::type_
        ) -> OpenAI::Responses::EasyInputMessage::type_

        def initialize: (
          content: OpenAI::Responses::EasyInputMessage::content,
          role: OpenAI::Responses::EasyInputMessage::role,
          ?type: OpenAI::Responses::EasyInputMessage::type_
        ) -> void

        type content =
          String
          | OpenAI::Models::Responses::response_input_message_content_list

        module Content
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Responses::EasyInputMessage::content]
        end

        type role = :user | :assistant | :system | :developer

        module Role
          extend OpenAI::Internal::Type::Enum

          USER: :user
          ASSISTANT: :assistant
          SYSTEM: :system
          DEVELOPER: :developer

          def self?.values: -> ::Array[OpenAI::Responses::EasyInputMessage::role]
        end

        type type_ = :message

        module Type
          extend OpenAI::Internal::Type::Enum

          MESSAGE: :message

          def self?.values: -> ::Array[OpenAI::Responses::EasyInputMessage::type_]
        end
      end
    end
  end
end
