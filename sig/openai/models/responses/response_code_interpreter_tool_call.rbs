module OpenAI
  module Models
    module Responses
      type response_code_interpreter_tool_call =
        {
          id: String,
          code: String,
          results: ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::result],
          status: OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::status,
          type: :code_interpreter_call,
          container_id: String
        }

      class ResponseCodeInterpreterToolCall < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor code: String

        attr_accessor results: ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::result]

        attr_accessor status: OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::status

        attr_accessor type: :code_interpreter_call

        attr_reader container_id: String?

        def container_id=: (String) -> String

        def initialize: (
          id: String,
          code: String,
          results: ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::result],
          status: OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::status,
          ?container_id: String,
          ?type: :code_interpreter_call
        ) -> void

        def to_hash: -> {
          id: String,
          code: String,
          results: ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::result],
          status: OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::status,
          type: :code_interpreter_call,
          container_id: String
        }

        type result =
          OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Logs
          | OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Files

        module Result
          extend OpenAI::Internal::Type::Union

          type logs = { logs: String, type: :logs }

          class Logs < OpenAI::Internal::Type::BaseModel
            attr_accessor logs: String

            attr_accessor type: :logs

            def initialize: (logs: String, ?type: :logs) -> void

            def to_hash: -> { logs: String, type: :logs }
          end

          type files =
            {
              files: ::Array[OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Files::File],
              type: :files
            }

          class Files < OpenAI::Internal::Type::BaseModel
            attr_accessor files: ::Array[OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Files::File]

            attr_accessor type: :files

            def initialize: (
              files: ::Array[OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Files::File],
              ?type: :files
            ) -> void

            def to_hash: -> {
              files: ::Array[OpenAI::Responses::ResponseCodeInterpreterToolCall::Result::Files::File],
              type: :files
            }

            type file = { file_id: String, mime_type: String }

            class File < OpenAI::Internal::Type::BaseModel
              attr_accessor file_id: String

              attr_accessor mime_type: String

              def initialize: (file_id: String, mime_type: String) -> void

              def to_hash: -> { file_id: String, mime_type: String }
            end
          end

          def self?.variants: -> ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::result]
        end

        type status = :in_progress | :interpreting | :completed

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          INTERPRETING: :interpreting
          COMPLETED: :completed

          def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseCodeInterpreterToolCall::status]
        end
      end
    end
  end
end
