module OpenAI
  module Models
    module Beta
      module Threads
        type image_file =
          {
            file_id: String,
            detail: OpenAI::Models::Beta::Threads::ImageFile::detail
          }

        class ImageFile < OpenAI::Internal::Type::BaseModel
          attr_accessor file_id: String

          attr_reader detail: OpenAI::Models::Beta::Threads::ImageFile::detail?

          def detail=: (
            OpenAI::Models::Beta::Threads::ImageFile::detail
          ) -> OpenAI::Models::Beta::Threads::ImageFile::detail

          def initialize: (
            file_id: String,
            ?detail: OpenAI::Models::Beta::Threads::ImageFile::detail
          ) -> void

          def to_hash: -> {
            file_id: String,
            detail: OpenAI::Models::Beta::Threads::ImageFile::detail
          }

          type detail = :auto | :low | :high

          module Detail
            extend OpenAI::Internal::Type::Enum

            AUTO: :auto
            LOW: :low
            HIGH: :high

            def self?.values: -> ::Array[OpenAI::Models::Beta::Threads::ImageFile::detail]
          end
        end
      end
    end
  end
end
