module OpenAI
  module Models
    module Beta
      module Threads
        module Runs
          type function_tool_call_delta =
            {
              index: Integer,
              type: :function,
              id: String,
              function: OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function
            }

          class FunctionToolCallDelta < OpenAI::Internal::Type::BaseModel
            attr_accessor index: Integer

            attr_accessor type: :function

            attr_reader id: String?

            def id=: (String) -> String

            attr_reader function: OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function?

            def function=: (
              OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function
            ) -> OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function

            def initialize: (
              index: Integer,
              ?id: String,
              ?function: OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function,
              ?type: :function
            ) -> void

            def to_hash: -> {
              index: Integer,
              type: :function,
              id: String,
              function: OpenAI::Beta::Threads::Runs::FunctionToolCallDelta::Function
            }

            type function = { arguments: String, name: String, output: String? }

            class Function < OpenAI::Internal::Type::BaseModel
              attr_reader arguments: String?

              def arguments=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              attr_accessor output: String?

              def initialize: (
                ?arguments: String,
                ?name: String,
                ?output: String?
              ) -> void

              def to_hash: -> {
                arguments: String,
                name: String,
                output: String?
              }
            end
          end
        end
      end
    end
  end
end
