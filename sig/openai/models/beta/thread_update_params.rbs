module OpenAI
  module Models
    module Beta
      type thread_update_params =
        {
          metadata: OpenAI::Models::metadata?,
          tool_resources: OpenAI::Beta::ThreadUpdateParams::ToolResources?
        }
        & OpenAI::Internal::Type::request_parameters

      class ThreadUpdateParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor tool_resources: OpenAI::Beta::ThreadUpdateParams::ToolResources?

        def initialize: (
          ?metadata: OpenAI::Models::metadata?,
          ?tool_resources: OpenAI::Beta::ThreadUpdateParams::ToolResources?,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> {
          metadata: OpenAI::Models::metadata?,
          tool_resources: OpenAI::Beta::ThreadUpdateParams::ToolResources?,
          request_options: OpenAI::RequestOptions
        }

        type tool_resources =
          {
            code_interpreter: OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter,
            file_search: OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch
          }

        class ToolResources < OpenAI::Internal::Type::BaseModel
          attr_reader code_interpreter: OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter?

          def code_interpreter=: (
            OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter
          ) -> OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter

          attr_reader file_search: OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch?

          def file_search=: (
            OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch
          ) -> OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch

          def initialize: (
            ?code_interpreter: OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter,
            ?file_search: OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch
          ) -> void

          def to_hash: -> {
            code_interpreter: OpenAI::Beta::ThreadUpdateParams::ToolResources::CodeInterpreter,
            file_search: OpenAI::Beta::ThreadUpdateParams::ToolResources::FileSearch
          }

          type code_interpreter = { file_ids: ::Array[String] }

          class CodeInterpreter < OpenAI::Internal::Type::BaseModel
            attr_reader file_ids: ::Array[String]?

            def file_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?file_ids: ::Array[String]) -> void

            def to_hash: -> { file_ids: ::Array[String] }
          end

          type file_search = { vector_store_ids: ::Array[String] }

          class FileSearch < OpenAI::Internal::Type::BaseModel
            attr_reader vector_store_ids: ::Array[String]?

            def vector_store_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?vector_store_ids: ::Array[String]) -> void

            def to_hash: -> { vector_store_ids: ::Array[String] }
          end
        end
      end
    end
  end
end
