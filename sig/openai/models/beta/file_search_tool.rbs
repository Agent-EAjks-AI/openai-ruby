module OpenAI
  module Models
    module Beta
      type file_search_tool =
        {
          type: :file_search,
          file_search: OpenAI::Beta::FileSearchTool::FileSearch
        }

      class FileSearchTool < OpenAI::Internal::Type::BaseModel
        attr_accessor type: :file_search

        attr_reader file_search: OpenAI::Beta::FileSearchTool::FileSearch?

        def file_search=: (
          OpenAI::Beta::FileSearchTool::FileSearch
        ) -> OpenAI::Beta::FileSearchTool::FileSearch

        def initialize: (
          ?file_search: OpenAI::Beta::FileSearchTool::FileSearch,
          ?type: :file_search
        ) -> void

        type file_search =
          {
            max_num_results: Integer,
            ranking_options: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions
          }

        class FileSearch < OpenAI::Internal::Type::BaseModel
          attr_reader max_num_results: Integer?

          def max_num_results=: (Integer) -> Integer

          attr_reader ranking_options: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions?

          def ranking_options=: (
            OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions
          ) -> OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions

          def initialize: (
            ?max_num_results: Integer,
            ?ranking_options: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions
          ) -> void

          type ranking_options =
            {
              score_threshold: Float,
              ranker: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
            }

          class RankingOptions < OpenAI::Internal::Type::BaseModel
            attr_accessor score_threshold: Float

            attr_reader ranker: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker?

            def ranker=: (
              OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
            ) -> OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker

            def initialize: (
              score_threshold: Float,
              ?ranker: OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
            ) -> void

            type ranker = :auto | :default_2024_08_21

            module Ranker
              extend OpenAI::Internal::Type::Enum

              AUTO: :auto
              DEFAULT_2024_08_21: :default_2024_08_21

              def self?.values: -> ::Array[OpenAI::Beta::FileSearchTool::FileSearch::RankingOptions::ranker]
            end
          end
        end
      end
    end
  end
end
