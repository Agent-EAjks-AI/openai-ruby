module OpenAI
  module Models
    module Beta
      type thread_create_and_run_params =
        {
          assistant_id: String,
          instructions: String?,
          max_completion_tokens: Integer?,
          max_prompt_tokens: Integer?,
          metadata: OpenAI::Models::metadata?,
          model: OpenAI::Models::Beta::ThreadCreateAndRunParams::model?,
          parallel_tool_calls: bool,
          response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          temperature: Float?,
          thread: OpenAI::Beta::ThreadCreateAndRunParams::Thread,
          tool_choice: OpenAI::Models::Beta::assistant_tool_choice_option?,
          tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources?,
          tools: ::Array[OpenAI::Models::Beta::assistant_tool]?,
          top_p: Float?,
          truncation_strategy: OpenAI::Beta::TruncationObject?
        }
        & OpenAI::Internal::Type::request_parameters

      class ThreadCreateAndRunParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_accessor assistant_id: String

        attr_accessor instructions: String?

        attr_accessor max_completion_tokens: Integer?

        attr_accessor max_prompt_tokens: Integer?

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor model: OpenAI::Models::Beta::ThreadCreateAndRunParams::model?

        attr_reader parallel_tool_calls: bool?

        def parallel_tool_calls=: (bool) -> bool

        attr_accessor response_format: OpenAI::Models::Beta::assistant_response_format_option?

        attr_accessor temperature: Float?

        attr_reader thread: OpenAI::Beta::ThreadCreateAndRunParams::Thread?

        def thread=: (
          OpenAI::Beta::ThreadCreateAndRunParams::Thread
        ) -> OpenAI::Beta::ThreadCreateAndRunParams::Thread

        attr_accessor tool_choice: OpenAI::Models::Beta::assistant_tool_choice_option?

        attr_accessor tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources?

        attr_accessor tools: ::Array[OpenAI::Models::Beta::assistant_tool]?

        attr_accessor top_p: Float?

        attr_accessor truncation_strategy: OpenAI::Beta::TruncationObject?

        def initialize: (
          assistant_id: String,
          ?instructions: String?,
          ?max_completion_tokens: Integer?,
          ?max_prompt_tokens: Integer?,
          ?metadata: OpenAI::Models::metadata?,
          ?model: OpenAI::Models::Beta::ThreadCreateAndRunParams::model?,
          ?parallel_tool_calls: bool,
          ?response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          ?temperature: Float?,
          ?thread: OpenAI::Beta::ThreadCreateAndRunParams::Thread,
          ?tool_choice: OpenAI::Models::Beta::assistant_tool_choice_option?,
          ?tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources?,
          ?tools: ::Array[OpenAI::Models::Beta::assistant_tool]?,
          ?top_p: Float?,
          ?truncation_strategy: OpenAI::Beta::TruncationObject?,
          ?request_options: OpenAI::request_opts
        ) -> void

        type model = String | OpenAI::Models::chat_model

        module Model
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Beta::ThreadCreateAndRunParams::model]
        end

        type thread =
          {
            messages: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message],
            metadata: OpenAI::Models::metadata?,
            tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources?
          }

        class Thread < OpenAI::Internal::Type::BaseModel
          attr_reader messages: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message]?

          def messages=: (
            ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message]
          ) -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message]

          attr_accessor metadata: OpenAI::Models::metadata?

          attr_accessor tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources?

          def initialize: (
            ?messages: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message],
            ?metadata: OpenAI::Models::metadata?,
            ?tool_resources: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources?
          ) -> void

          type message =
            {
              content: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::content,
              role: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::role,
              attachments: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment]?,
              metadata: OpenAI::Models::metadata?
            }

          class Message < OpenAI::Internal::Type::BaseModel
            attr_accessor content: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::content

            attr_accessor role: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::role

            attr_accessor attachments: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment]?

            attr_accessor metadata: OpenAI::Models::metadata?

            def initialize: (
              content: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::content,
              role: OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::role,
              ?attachments: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment]?,
              ?metadata: OpenAI::Models::metadata?
            ) -> void

            type content =
              String
              | ::Array[OpenAI::Models::Beta::Threads::message_content_part_param]

            module Content
              extend OpenAI::Internal::Type::Union

              def self?.variants: -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::content]

              MessageContentPartParamArray: OpenAI::Internal::Type::Converter
            end

            type role = :user | :assistant

            module Role
              extend OpenAI::Internal::Type::Enum

              USER: :user
              ASSISTANT: :assistant

              def self?.values: -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::role]
            end

            type attachment =
              {
                file_id: String,
                tools: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]
              }

            class Attachment < OpenAI::Internal::Type::BaseModel
              attr_reader file_id: String?

              def file_id=: (String) -> String

              attr_reader tools: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]?

              def tools=: (
                ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]
              ) -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]

              def initialize: (
                ?file_id: String,
                ?tools: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]
              ) -> void

              type tool =
                OpenAI::Beta::CodeInterpreterTool
                | OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::Tool::FileSearch

              module Tool
                extend OpenAI::Internal::Type::Union

                type file_search = { type: :file_search }

                class FileSearch < OpenAI::Internal::Type::BaseModel
                  attr_accessor type: :file_search

                  def initialize: (?type: :file_search) -> void
                end

                def self?.variants: -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::Message::Attachment::tool]
              end
            end
          end

          type tool_resources =
            {
              code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::CodeInterpreter,
              file_search: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch
            }

          class ToolResources < OpenAI::Internal::Type::BaseModel
            attr_reader code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::CodeInterpreter?

            def code_interpreter=: (
              OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::CodeInterpreter
            ) -> OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::CodeInterpreter

            attr_reader file_search: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch?

            def file_search=: (
              OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch
            ) -> OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch

            def initialize: (
              ?code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::CodeInterpreter,
              ?file_search: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch
            ) -> void

            type code_interpreter = { file_ids: ::Array[String] }

            class CodeInterpreter < OpenAI::Internal::Type::BaseModel
              attr_reader file_ids: ::Array[String]?

              def file_ids=: (::Array[String]) -> ::Array[String]

              def initialize: (?file_ids: ::Array[String]) -> void
            end

            type file_search =
              {
                vector_store_ids: ::Array[String],
                vector_stores: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore]
              }

            class FileSearch < OpenAI::Internal::Type::BaseModel
              attr_reader vector_store_ids: ::Array[String]?

              def vector_store_ids=: (::Array[String]) -> ::Array[String]

              attr_reader vector_stores: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore]?

              def vector_stores=: (
                ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore]
              ) -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore]

              def initialize: (
                ?vector_store_ids: ::Array[String],
                ?vector_stores: ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore]
              ) -> void

              type vector_store =
                {
                  chunking_strategy: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy,
                  file_ids: ::Array[String],
                  metadata: OpenAI::Models::metadata?
                }

              class VectorStore < OpenAI::Internal::Type::BaseModel
                attr_reader chunking_strategy: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy?

                def chunking_strategy=: (
                  OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy
                ) -> OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy

                attr_reader file_ids: ::Array[String]?

                def file_ids=: (::Array[String]) -> ::Array[String]

                attr_accessor metadata: OpenAI::Models::metadata?

                def initialize: (
                  ?chunking_strategy: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy,
                  ?file_ids: ::Array[String],
                  ?metadata: OpenAI::Models::metadata?
                ) -> void

                type chunking_strategy =
                  OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Auto
                  | OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static

                module ChunkingStrategy
                  extend OpenAI::Internal::Type::Union

                  type auto = { type: :auto }

                  class Auto < OpenAI::Internal::Type::BaseModel
                    attr_accessor type: :auto

                    def initialize: (?type: :auto) -> void
                  end

                  type static =
                    {
                      static: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static,
                      type: :static
                    }

                  class Static < OpenAI::Internal::Type::BaseModel
                    attr_accessor static: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static

                    attr_accessor type: :static

                    def initialize: (
                      static: OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static,
                      ?type: :static
                    ) -> void

                    type static =
                      {
                        chunk_overlap_tokens: Integer,
                        max_chunk_size_tokens: Integer
                      }

                    class Static < OpenAI::Internal::Type::BaseModel
                      attr_accessor chunk_overlap_tokens: Integer

                      attr_accessor max_chunk_size_tokens: Integer

                      def initialize: (
                        chunk_overlap_tokens: Integer,
                        max_chunk_size_tokens: Integer
                      ) -> void
                    end
                  end

                  def self?.variants: -> ::Array[OpenAI::Beta::ThreadCreateAndRunParams::Thread::ToolResources::FileSearch::VectorStore::chunking_strategy]
                end
              end
            end
          end
        end

        type tool_resources =
          {
            code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::CodeInterpreter,
            file_search: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::FileSearch
          }

        class ToolResources < OpenAI::Internal::Type::BaseModel
          attr_reader code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::CodeInterpreter?

          def code_interpreter=: (
            OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::CodeInterpreter
          ) -> OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::CodeInterpreter

          attr_reader file_search: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::FileSearch?

          def file_search=: (
            OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::FileSearch
          ) -> OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::FileSearch

          def initialize: (
            ?code_interpreter: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::CodeInterpreter,
            ?file_search: OpenAI::Beta::ThreadCreateAndRunParams::ToolResources::FileSearch
          ) -> void

          type code_interpreter = { file_ids: ::Array[String] }

          class CodeInterpreter < OpenAI::Internal::Type::BaseModel
            attr_reader file_ids: ::Array[String]?

            def file_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?file_ids: ::Array[String]) -> void
          end

          type file_search = { vector_store_ids: ::Array[String] }

          class FileSearch < OpenAI::Internal::Type::BaseModel
            attr_reader vector_store_ids: ::Array[String]?

            def vector_store_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?vector_store_ids: ::Array[String]) -> void
          end
        end
      end
    end
  end
end
