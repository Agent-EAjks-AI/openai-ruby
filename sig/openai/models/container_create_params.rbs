module OpenAI
  module Models
    type container_create_params =
      {
        name: String,
        expires_after: OpenAI::ContainerCreateParams::ExpiresAfter,
        file_ids: ::Array[String]
      }
      & OpenAI::Internal::Type::request_parameters

    class ContainerCreateParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_accessor name: String

      attr_reader expires_after: OpenAI::ContainerCreateParams::ExpiresAfter?

      def expires_after=: (
        OpenAI::ContainerCreateParams::ExpiresAfter
      ) -> OpenAI::ContainerCreateParams::ExpiresAfter

      attr_reader file_ids: ::Array[String]?

      def file_ids=: (::Array[String]) -> ::Array[String]

      def initialize: (
        name: String,
        ?expires_after: OpenAI::ContainerCreateParams::ExpiresAfter,
        ?file_ids: ::Array[String],
        ?request_options: OpenAI::request_opts
      ) -> void

      type expires_after =
        {
          anchor: OpenAI::ContainerCreateParams::ExpiresAfter::anchor,
          minutes: Integer
        }

      class ExpiresAfter < OpenAI::Internal::Type::BaseModel
        attr_accessor anchor: OpenAI::ContainerCreateParams::ExpiresAfter::anchor

        attr_accessor minutes: Integer

        def initialize: (
          anchor: OpenAI::ContainerCreateParams::ExpiresAfter::anchor,
          minutes: Integer
        ) -> void

        type anchor = :last_active_at

        module Anchor
          extend OpenAI::Internal::Type::Enum

          LAST_ACTIVE_AT: :last_active_at

          def self?.values: -> ::Array[OpenAI::ContainerCreateParams::ExpiresAfter::anchor]
        end
      end
    end
  end
end
