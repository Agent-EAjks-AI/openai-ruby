module OpenAI
  module Models
    type create_embedding_response =
      {
        data: ::Array[OpenAI::Embedding],
        model: String,
        object: :list,
        usage: OpenAI::CreateEmbeddingResponse::Usage
      }

    class CreateEmbeddingResponse < OpenAI::Internal::Type::BaseModel
      attr_accessor data: ::Array[OpenAI::Embedding]

      attr_accessor model: String

      attr_accessor object: :list

      attr_accessor usage: OpenAI::CreateEmbeddingResponse::Usage

      def initialize: (
        data: ::Array[OpenAI::Embedding],
        model: String,
        usage: OpenAI::CreateEmbeddingResponse::Usage,
        ?object: :list
      ) -> void

      type usage = { prompt_tokens: Integer, total_tokens: Integer }

      class Usage < OpenAI::Internal::Type::BaseModel
        attr_accessor prompt_tokens: Integer

        attr_accessor total_tokens: Integer

        def initialize: (prompt_tokens: Integer, total_tokens: Integer) -> void
      end
    end
  end
end
