# frozen_string_literal: true

module OpenAI
  module Models
    module Responses
      # A message input to the model with a role indicating instruction following
      # hierarchy. Instructions given with the `developer` or `system` role take
      # precedence over instructions given with the `user` role. Messages with the
      # `assistant` role are presumed to have been generated by the model in previous
      # interactions.
      module ResponseInputItem
        extend OpenAI::Internal::Type::Union

        discriminator :type

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role. Messages with the
        # `assistant` role are presumed to have been generated by the model in previous
        # interactions.
        variant :message, -> { OpenAI::Responses::EasyInputMessage }

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role.
        variant :message, -> { OpenAI::Responses::ResponseInputItem::Message }

        # An output message from the model.
        variant :message, -> { OpenAI::Responses::ResponseOutputMessage }

        # The results of a file search tool call. See the
        # [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
        variant :file_search_call, -> { OpenAI::Responses::ResponseFileSearchToolCall }

        # A tool call to a computer use tool. See the
        # [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
        variant :computer_call, -> { OpenAI::Responses::ResponseComputerToolCall }

        # The output of a computer tool call.
        variant :computer_call_output, -> { OpenAI::Responses::ResponseInputItem::ComputerCallOutput }

        # The results of a web search tool call. See the
        # [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
        variant :web_search_call, -> { OpenAI::Responses::ResponseFunctionWebSearch }

        # A tool call to run a function. See the
        # [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
        variant :function_call, -> { OpenAI::Responses::ResponseFunctionToolCall }

        # The output of a function tool call.
        variant :function_call_output, -> { OpenAI::Responses::ResponseInputItem::FunctionCallOutput }

        # A description of the chain of thought used by a reasoning model while generating
        # a response. Be sure to include these items in your `input` to the Responses API
        # for subsequent turns of a conversation if you are manually
        # [managing context](https://platform.openai.com/docs/guides/conversation-state).
        variant :reasoning, -> { OpenAI::Responses::ResponseReasoningItem }

        # An internal identifier for an item to reference.
        variant :item_reference, -> { OpenAI::Responses::ResponseInputItem::ItemReference }

        class Message < OpenAI::Internal::Type::BaseModel
          # @!attribute content
          #   A list of one or many input items to the model, containing different content
          #   types.
          #
          #   @return [Array<OpenAI::Responses::ResponseInputText, OpenAI::Responses::ResponseInputImage, OpenAI::Responses::ResponseInputFile>]
          required :content,
                   -> {
                     OpenAI::Internal::Type::ArrayOf[union: OpenAI::Responses::ResponseInputContent]
                   }

          # @!attribute role
          #   The role of the message input. One of `user`, `system`, or `developer`.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::Message::Role]
          required :role, enum: -> { OpenAI::Responses::ResponseInputItem::Message::Role }

          # @!attribute status
          #   The status of item. One of `in_progress`, `completed`, or `incomplete`.
          #   Populated when items are returned via API.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::Message::Status, nil]
          optional :status, enum: -> { OpenAI::Responses::ResponseInputItem::Message::Status }

          # @!attribute type
          #   The type of the message input. Always set to `message`.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::Message::Type, nil]
          optional :type, enum: -> { OpenAI::Responses::ResponseInputItem::Message::Type }

          # @!method initialize(content:, role:, status: nil, type: nil)
          #   Some parameter documentations has been truncated, see
          #   {OpenAI::Responses::ResponseInputItem::Message} for more details.
          #
          #   A message input to the model with a role indicating instruction following
          #   hierarchy. Instructions given with the `developer` or `system` role take
          #   precedence over instructions given with the `user` role.
          #
          #   @param content [Array<OpenAI::Responses::ResponseInputText, OpenAI::Responses::ResponseInputImage, OpenAI::Responses::ResponseInputFile>] A list of one or many input items to the model, containing different content
          #
          #   @param role [Symbol, OpenAI::Responses::ResponseInputItem::Message::Role] The role of the message input. One of `user`, `system`, or `developer`.
          #
          #   @param status [Symbol, OpenAI::Responses::ResponseInputItem::Message::Status] The status of item. One of `in_progress`, `completed`, or
          #
          #   @param type [Symbol, OpenAI::Responses::ResponseInputItem::Message::Type] The type of the message input. Always set to `message`.

          # The role of the message input. One of `user`, `system`, or `developer`.
          #
          # @see OpenAI::Responses::ResponseInputItem::Message#role
          module Role
            extend OpenAI::Internal::Type::Enum

            USER = :user
            SYSTEM = :system
            DEVELOPER = :developer

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # The status of item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          #
          # @see OpenAI::Responses::ResponseInputItem::Message#status
          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # The type of the message input. Always set to `message`.
          #
          # @see OpenAI::Responses::ResponseInputItem::Message#type
          module Type
            extend OpenAI::Internal::Type::Enum

            MESSAGE = :message

            # @!method self.values
            #   @return [Array<Symbol>]
          end
        end

        class ComputerCallOutput < OpenAI::Internal::Type::BaseModel
          # @!attribute call_id
          #   The ID of the computer tool call that produced the output.
          #
          #   @return [String]
          required :call_id, String

          # @!attribute output
          #   A computer screenshot image used with the computer use tool.
          #
          #   @return [OpenAI::Responses::ResponseComputerToolCallOutputScreenshot]
          required :output, -> { OpenAI::Responses::ResponseComputerToolCallOutputScreenshot }

          # @!attribute type
          #   The type of the computer tool call output. Always `computer_call_output`.
          #
          #   @return [Symbol, :computer_call_output]
          required :type, const: :computer_call_output

          # @!attribute id
          #   The ID of the computer tool call output.
          #
          #   @return [String, nil]
          optional :id, String, nil?: true

          # @!attribute acknowledged_safety_checks
          #   The safety checks reported by the API that have been acknowledged by the
          #   developer.
          #
          #   @return [Array<OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck>, nil]
          optional :acknowledged_safety_checks,
                   -> {
                     OpenAI::Internal::Type::ArrayOf[OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck]
                   },
                   nil?: true

          # @!attribute status
          #   The status of the message input. One of `in_progress`, `completed`, or
          #   `incomplete`. Populated when input items are returned via API.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status, nil]
          optional :status,
                   enum: -> { OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status },
                   nil?: true

          # @!method initialize(call_id:, output:, id: nil, acknowledged_safety_checks: nil, status: nil, type: :computer_call_output)
          #   Some parameter documentations has been truncated, see
          #   {OpenAI::Responses::ResponseInputItem::ComputerCallOutput} for more details.
          #
          #   The output of a computer tool call.
          #
          #   @param call_id [String] The ID of the computer tool call that produced the output.
          #
          #   @param output [OpenAI::Responses::ResponseComputerToolCallOutputScreenshot] A computer screenshot image used with the computer use tool.
          #
          #   @param id [String, nil] The ID of the computer tool call output.
          #
          #   @param acknowledged_safety_checks [Array<OpenAI::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck>, nil] The safety checks reported by the API that have been acknowledged by the develop
          #
          #   @param status [Symbol, OpenAI::Responses::ResponseInputItem::ComputerCallOutput::Status, nil] The status of the message input. One of `in_progress`, `completed`, or `incomple
          #
          #   @param type [Symbol, :computer_call_output] The type of the computer tool call output. Always `computer_call_output`.

          class AcknowledgedSafetyCheck < OpenAI::Internal::Type::BaseModel
            # @!attribute id
            #   The ID of the pending safety check.
            #
            #   @return [String]
            required :id, String

            # @!attribute code
            #   The type of the pending safety check.
            #
            #   @return [String, nil]
            optional :code, String, nil?: true

            # @!attribute message
            #   Details about the pending safety check.
            #
            #   @return [String, nil]
            optional :message, String, nil?: true

            # @!method initialize(id:, code: nil, message: nil)
            #   A pending safety check for the computer call.
            #
            #   @param id [String] The ID of the pending safety check.
            #
            #   @param code [String, nil] The type of the pending safety check.
            #
            #   @param message [String, nil] Details about the pending safety check.
          end

          # The status of the message input. One of `in_progress`, `completed`, or
          # `incomplete`. Populated when input items are returned via API.
          #
          # @see OpenAI::Responses::ResponseInputItem::ComputerCallOutput#status
          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            # @!method self.values
            #   @return [Array<Symbol>]
          end
        end

        class FunctionCallOutput < OpenAI::Internal::Type::BaseModel
          # @!attribute call_id
          #   The unique ID of the function tool call generated by the model.
          #
          #   @return [String]
          required :call_id, String

          # @!attribute output
          #   A JSON string of the output of the function tool call.
          #
          #   @return [String]
          required :output, String

          # @!attribute type
          #   The type of the function tool call output. Always `function_call_output`.
          #
          #   @return [Symbol, :function_call_output]
          required :type, const: :function_call_output

          # @!attribute id
          #   The unique ID of the function tool call output. Populated when this item is
          #   returned via API.
          #
          #   @return [String, nil]
          optional :id, String, nil?: true

          # @!attribute status
          #   The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          #   Populated when items are returned via API.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status, nil]
          optional :status,
                   enum: -> { OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status },
                   nil?: true

          # @!method initialize(call_id:, output:, id: nil, status: nil, type: :function_call_output)
          #   Some parameter documentations has been truncated, see
          #   {OpenAI::Responses::ResponseInputItem::FunctionCallOutput} for more details.
          #
          #   The output of a function tool call.
          #
          #   @param call_id [String] The unique ID of the function tool call generated by the model.
          #
          #   @param output [String] A JSON string of the output of the function tool call.
          #
          #   @param id [String, nil] The unique ID of the function tool call output. Populated when this item is retu
          #
          #   @param status [Symbol, OpenAI::Responses::ResponseInputItem::FunctionCallOutput::Status, nil] The status of the item. One of `in_progress`, `completed`, or `incomplete`. Popu
          #
          #   @param type [Symbol, :function_call_output] The type of the function tool call output. Always `function_call_output`.

          # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          # Populated when items are returned via API.
          #
          # @see OpenAI::Responses::ResponseInputItem::FunctionCallOutput#status
          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            # @!method self.values
            #   @return [Array<Symbol>]
          end
        end

        class ItemReference < OpenAI::Internal::Type::BaseModel
          # @!attribute id
          #   The ID of the item to reference.
          #
          #   @return [String]
          required :id, String

          # @!attribute type
          #   The type of item to reference. Always `item_reference`.
          #
          #   @return [Symbol, OpenAI::Responses::ResponseInputItem::ItemReference::Type, nil]
          optional :type, enum: -> { OpenAI::Responses::ResponseInputItem::ItemReference::Type }, nil?: true

          # @!method initialize(id:, type: nil)
          #   An internal identifier for an item to reference.
          #
          #   @param id [String] The ID of the item to reference.
          #
          #   @param type [Symbol, OpenAI::Responses::ResponseInputItem::ItemReference::Type, nil] The type of item to reference. Always `item_reference`.

          # The type of item to reference. Always `item_reference`.
          #
          # @see OpenAI::Responses::ResponseInputItem::ItemReference#type
          module Type
            extend OpenAI::Internal::Type::Enum

            ITEM_REFERENCE = :item_reference

            # @!method self.values
            #   @return [Array<Symbol>]
          end
        end

        # @!method self.variants
        #   @return [Array(OpenAI::Responses::EasyInputMessage, OpenAI::Responses::ResponseInputItem::Message, OpenAI::Responses::ResponseOutputMessage, OpenAI::Responses::ResponseFileSearchToolCall, OpenAI::Responses::ResponseComputerToolCall, OpenAI::Responses::ResponseInputItem::ComputerCallOutput, OpenAI::Responses::ResponseFunctionWebSearch, OpenAI::Responses::ResponseFunctionToolCall, OpenAI::Responses::ResponseInputItem::FunctionCallOutput, OpenAI::Responses::ResponseReasoningItem, OpenAI::Responses::ResponseInputItem::ItemReference)]

        define_sorbet_constant!(:Variants) do
          T.type_alias do
            T.any(
              OpenAI::Responses::EasyInputMessage,
              OpenAI::Responses::ResponseInputItem::Message,
              OpenAI::Responses::ResponseOutputMessage,
              OpenAI::Responses::ResponseFileSearchToolCall,
              OpenAI::Responses::ResponseComputerToolCall,
              OpenAI::Responses::ResponseInputItem::ComputerCallOutput,
              OpenAI::Responses::ResponseFunctionWebSearch,
              OpenAI::Responses::ResponseFunctionToolCall,
              OpenAI::Responses::ResponseInputItem::FunctionCallOutput,
              OpenAI::Responses::ResponseReasoningItem,
              OpenAI::Responses::ResponseInputItem::ItemReference
            )
          end
        end
      end
    end
  end
end
