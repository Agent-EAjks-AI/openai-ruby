# frozen_string_literal: true

module OpenAI
  module Models
    class EvalItem < OpenAI::Internal::Type::BaseModel
      # @!attribute content
      #   Text inputs to the model - can contain template strings.
      #
      #   @return [String, OpenAI::Responses::ResponseInputText, OpenAI::EvalItem::Content::OutputText]
      required :content, union: -> { OpenAI::EvalItem::Content }

      # @!attribute role
      #   The role of the message input. One of `user`, `assistant`, `system`, or
      #   `developer`.
      #
      #   @return [Symbol, OpenAI::EvalItem::Role]
      required :role, enum: -> { OpenAI::EvalItem::Role }

      # @!attribute type
      #   The type of the message input. Always `message`.
      #
      #   @return [Symbol, OpenAI::EvalItem::Type, nil]
      optional :type, enum: -> { OpenAI::EvalItem::Type }

      # @!method initialize(content:, role:, type: nil)
      #   Some parameter documentations has been truncated, see {OpenAI::EvalItem} for
      #   more details.
      #
      #   A message input to the model with a role indicating instruction following
      #   hierarchy. Instructions given with the `developer` or `system` role take
      #   precedence over instructions given with the `user` role. Messages with the
      #   `assistant` role are presumed to have been generated by the model in previous
      #   interactions.
      #
      #   @param content [String, OpenAI::Responses::ResponseInputText, OpenAI::EvalItem::Content::OutputText] Text inputs to the model - can contain template strings.
      #
      #   @param role [Symbol, OpenAI::EvalItem::Role] The role of the message input. One of `user`, `assistant`, `system`, or
      #
      #   @param type [Symbol, OpenAI::EvalItem::Type] The type of the message input. Always `message`.

      # Text inputs to the model - can contain template strings.
      #
      # @see OpenAI::EvalItem#content
      module Content
        extend OpenAI::Internal::Type::Union

        # A text input to the model.
        variant String

        # A text input to the model.
        variant -> { OpenAI::Responses::ResponseInputText }

        # A text output from the model.
        variant -> { OpenAI::EvalItem::Content::OutputText }

        class OutputText < OpenAI::Internal::Type::BaseModel
          # @!attribute text
          #   The text output from the model.
          #
          #   @return [String]
          required :text, String

          # @!attribute type
          #   The type of the output text. Always `output_text`.
          #
          #   @return [Symbol, :output_text]
          required :type, const: :output_text

          # @!method initialize(text:, type: :output_text)
          #   Some parameter documentations has been truncated, see
          #   {OpenAI::EvalItem::Content::OutputText} for more details.
          #
          #   A text output from the model.
          #
          #   @param text [String] The text output from the model.
          #
          #   @param type [Symbol, :output_text] The type of the output text. Always `output_text`.
        end

        # @!method self.variants
        #   @return [Array(String, OpenAI::Responses::ResponseInputText, OpenAI::EvalItem::Content::OutputText)]

        define_sorbet_constant!(:Variants) do
          T.type_alias do
            T.any(String, OpenAI::Responses::ResponseInputText, OpenAI::EvalItem::Content::OutputText)
          end
        end
      end

      # The role of the message input. One of `user`, `assistant`, `system`, or
      # `developer`.
      #
      # @see OpenAI::EvalItem#role
      module Role
        extend OpenAI::Internal::Type::Enum

        USER = :user
        ASSISTANT = :assistant
        SYSTEM = :system
        DEVELOPER = :developer

        # @!method self.values
        #   @return [Array<Symbol>]
      end

      # The type of the message input. Always `message`.
      #
      # @see OpenAI::EvalItem#type
      module Type
        extend OpenAI::Internal::Type::Enum

        MESSAGE = :message

        # @!method self.values
        #   @return [Array<Symbol>]
      end
    end
  end
end
