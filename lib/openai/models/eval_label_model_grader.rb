# frozen_string_literal: true

module OpenAI
  module Models
    class EvalLabelModelGrader < OpenAI::Internal::Type::BaseModel
      # @!attribute input
      #
      #   @return [Array<OpenAI::EvalLabelModelGrader::Input>]
      required :input, -> { OpenAI::Internal::Type::ArrayOf[OpenAI::EvalLabelModelGrader::Input] }

      # @!attribute labels
      #   The labels to assign to each item in the evaluation.
      #
      #   @return [Array<String>]
      required :labels, OpenAI::Internal::Type::ArrayOf[String]

      # @!attribute model
      #   The model to use for the evaluation. Must support structured outputs.
      #
      #   @return [String]
      required :model, String

      # @!attribute name
      #   The name of the grader.
      #
      #   @return [String]
      required :name, String

      # @!attribute passing_labels
      #   The labels that indicate a passing result. Must be a subset of labels.
      #
      #   @return [Array<String>]
      required :passing_labels, OpenAI::Internal::Type::ArrayOf[String]

      # @!attribute type
      #   The object type, which is always `label_model`.
      #
      #   @return [Symbol, :label_model]
      required :type, const: :label_model

      # @!method initialize(input:, labels:, model:, name:, passing_labels:, type: :label_model)
      #   A LabelModelGrader object which uses a model to assign labels to each item in
      #   the evaluation.
      #
      #   @param input [Array<OpenAI::EvalLabelModelGrader::Input>]
      #
      #   @param labels [Array<String>] The labels to assign to each item in the evaluation.
      #
      #   @param model [String] The model to use for the evaluation. Must support structured outputs.
      #
      #   @param name [String] The name of the grader.
      #
      #   @param passing_labels [Array<String>] The labels that indicate a passing result. Must be a subset of labels.
      #
      #   @param type [Symbol, :label_model] The object type, which is always `label_model`.

      class Input < OpenAI::Internal::Type::BaseModel
        # @!attribute content
        #   Text inputs to the model - can contain template strings.
        #
        #   @return [String, OpenAI::Responses::ResponseInputText, OpenAI::EvalLabelModelGrader::Input::Content::OutputText]
        required :content, union: -> { OpenAI::EvalLabelModelGrader::Input::Content }

        # @!attribute role
        #   The role of the message input. One of `user`, `assistant`, `system`, or
        #   `developer`.
        #
        #   @return [Symbol, OpenAI::EvalLabelModelGrader::Input::Role]
        required :role, enum: -> { OpenAI::EvalLabelModelGrader::Input::Role }

        # @!attribute type
        #   The type of the message input. Always `message`.
        #
        #   @return [Symbol, OpenAI::EvalLabelModelGrader::Input::Type, nil]
        optional :type, enum: -> { OpenAI::EvalLabelModelGrader::Input::Type }

        # @!method initialize(content:, role:, type: nil)
        #   Some parameter documentations has been truncated, see
        #   {OpenAI::EvalLabelModelGrader::Input} for more details.
        #
        #   A message input to the model with a role indicating instruction following
        #   hierarchy. Instructions given with the `developer` or `system` role take
        #   precedence over instructions given with the `user` role. Messages with the
        #   `assistant` role are presumed to have been generated by the model in previous
        #   interactions.
        #
        #   @param content [String, OpenAI::Responses::ResponseInputText, OpenAI::EvalLabelModelGrader::Input::Content::OutputText] Text inputs to the model - can contain template strings.
        #
        #   @param role [Symbol, OpenAI::EvalLabelModelGrader::Input::Role] The role of the message input. One of `user`, `assistant`, `system`, or
        #
        #   @param type [Symbol, OpenAI::EvalLabelModelGrader::Input::Type] The type of the message input. Always `message`.

        # Text inputs to the model - can contain template strings.
        #
        # @see OpenAI::EvalLabelModelGrader::Input#content
        module Content
          extend OpenAI::Internal::Type::Union

          # A text input to the model.
          variant String

          # A text input to the model.
          variant -> { OpenAI::Responses::ResponseInputText }

          # A text output from the model.
          variant -> { OpenAI::EvalLabelModelGrader::Input::Content::OutputText }

          class OutputText < OpenAI::Internal::Type::BaseModel
            # @!attribute text
            #   The text output from the model.
            #
            #   @return [String]
            required :text, String

            # @!attribute type
            #   The type of the output text. Always `output_text`.
            #
            #   @return [Symbol, :output_text]
            required :type, const: :output_text

            # @!method initialize(text:, type: :output_text)
            #   Some parameter documentations has been truncated, see
            #   {OpenAI::EvalLabelModelGrader::Input::Content::OutputText} for more details.
            #
            #   A text output from the model.
            #
            #   @param text [String] The text output from the model.
            #
            #   @param type [Symbol, :output_text] The type of the output text. Always `output_text`.
          end

          # @!method self.variants
          #   @return [Array(String, OpenAI::Responses::ResponseInputText, OpenAI::EvalLabelModelGrader::Input::Content::OutputText)]
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        # `developer`.
        #
        # @see OpenAI::EvalLabelModelGrader::Input#role
        module Role
          extend OpenAI::Internal::Type::Enum

          USER = :user
          ASSISTANT = :assistant
          SYSTEM = :system
          DEVELOPER = :developer

          # @!method self.values
          #   @return [Array<Symbol>]
        end

        # The type of the message input. Always `message`.
        #
        # @see OpenAI::EvalLabelModelGrader::Input#type
        module Type
          extend OpenAI::Internal::Type::Enum

          MESSAGE = :message

          # @!method self.values
          #   @return [Array<Symbol>]
        end
      end
    end
  end
end
